type ArgParser 
type ArgsParsed 
  path: String? 
  option: CompilerOption
  // flags
  verbose: Bool
  lsp: Bool

constructor ArgsParsed help = ArgsParsed path: null option: CompilerOption.Help verbose: false lsp: false

/// prints help if its explicit
/// if there a mistake in args, returns Help flag
constructor ArgParser args::List::String -> ArgsParsed = [
  help = """
    Usage:
      FILE — compile and run single file
      run — compile and run project from "main" file
      run FILE — compile and run project from root file
      run FILE
      build — compile only(creates jar binary in current folder)
  """ trimIndent

  args contains: "--help", ifTrue: [
    ^ ArgsParsed help
  ]

  // separate flags from args
  // flags = #{"--verbose" false 
  //           "--lsp"     false}

  mut verbose = false
  mut lsp = false
  filteredArgs = args filter: [
    // flags at: it put: true
    it == "--verbose" ifTrue: [verbose <- true]
    it == "--lsp" ifTrue: [lsp <- true]
    (verbose || lsp) not
  ]

  getFirstArg = [
    arg = args at: 0
    | arg
    | "run" => CompilerOption.Run
    | "build" => CompilerOption.Build
    | "info" => CompilerOption.Info
    |=> [
      "$arg arg is unknown" echo
      CompilerOption.Help
    ]
  ]

  ^ | args count
    | 1 => 
      ArgsParsed path: null option: getFirstArg do verbose: verbose lsp: lsp
    | 2 => [
      arg1 = getFirstArg do
      arg2 = args at: 1
      ArgsParsed path: arg2 option: arg1 verbose: verbose lsp: lsp
    ]
    |=> ArgsParsed help
]

enum CompilerOption = Run | Build | Daemon | RunTests | Info | Help