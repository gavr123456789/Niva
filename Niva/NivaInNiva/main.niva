type Program
  io: IO


type FilePath = String
type FileContent = String

type IO
  readFile: [FilePath -> String]
  writeFile: [FilePath, FileContent -> String] // 
  walkDir: [FilePath -> List::String]


/// takes fileNames to Content
type NivaCompiler 
/// takes main file and collects all the files for compilation
type NivaBuildSystem


resolveMatch = [
  fileMain = """
    | 1
    | 1 => [1 echo]
    | 2 => [2 echo]
    |=> 3 echo
  """


  result = ResolverHelper resolve: #{"main" fileMain} entryPoint: "main"
  db = result db
  typedAst = result fileToStatements at: "main", unpackOrPANIC  

  typedAst first toTyped nivaType log

] 

collections = [
  list = {1 2 3 4} 
  map = #{1 "one", 2 "two"}
  //set = #(1 1 2 2) 
  
  // {"2!" "4!"}
  list 
    filter: [it % 2 == 0], 
    map: [it toString + "!"] 
  // {{1 2} {3 4}}
  list chunked: 2

  //Pair({3 4} {1 2})
  list partition: [it > 2], echo
] do


resolveGenerics = [
  fileMain = """
    type Box x: T y: T
    box = Box x: 1 y: 2


  """


  result = ResolverHelper resolve: #{"main" fileMain} entryPoint: "main"
  db = result db
  typedAst = result fileToStatements at: "main", unpackOrPANIC  

  

] do