type Program
  io: IO
  
type IO
  readFile: [String -> String]
  walkDir: [String -> List::String]


/// takes fileNames to Content
type NivaCompiler 
/// takes main file and collects all the files for compilation
type NivaBuildSystem


resolver = [
  fileMain = """
    type Person age: Int 
    type Wallet money: Int

    Int from::Int to::Int -> Int = 5

    // type Money declared in a different file
    Money make::Int sas::String -> Int = [
      make from: 1 to: 2
    ]
  """

  fileMoney = """
    type Money ofPerson: Person
  """


  statements  = TestParse withInput: fileMain expectedCount: -1
  statements2 = TestParse withInput: fileMoney expectedCount: -1
  listOfFilesContents = #{"main" statements "money" statements2} 
  db = TyperDB new

  msgDecls = TypeDeclVisitor db: db, 
    visitAllTypesThenTypesAndMethods: listOfFilesContents

  MsgDeclVisitor new processBodyes: msgDecls db: db

  TO DO: "add keywords resolve"

] do

dbTest = [

  fileMain = """
    type Person age: Int 
    type Wallet money: Int

    // type Money declared in a different file
    Money make::Int sas::String -> Int = [
      x::Int = 42
      1 inc dec
      2 inc
    ]
    // forward declaration
    type Money ofPerson: Person

  """

  statements  = TestParse withInput: fileMain expectedCount: -1
  listOfFilesContents = #{"main" statements} 
  db = TyperDB new

  msgDecls = TypeDeclVisitor db: db, 
    visitAllTypesThenTypesAndMethods: listOfFilesContents

  MsgDeclVisitor new processBodyes: msgDecls db: db



] 

parsing = [
  input = """
    | 3
    | 1 => 6
    | 2 => 5
    | 3 => 4
  """ trimIndent

  statements = TestParse withInput: input expectedCount: 1
  unaryDecl = statements at: 0
  unaryDecl debug
] 





returnTest = [
  input = """
    [a + b]

    // typed args with comma
    [ a::Int, b::Int ->
      1 inc
    ]

    // typed args no comma
    [ a::Int b::Int ->
      1 inc
    ]

    // untyped args with comma
    [ a, b ->
      1 inc
    ]

    // untyped args no comma
    [ a b ->
      1 inc
    ]

    // empty
    []

    // no args
    [a b inc]

    // unary after
    ["sas"] do

    // call with args
    [x::Int, y::Int -> x + y] x: 1 y: 2
  """ trimIndent

  input2 = """
  [a b] do
  """

  statements = TestParse withInput: input expectedCount: 7
  statements echo
] 



  // unions = """
  //   union Color = Red | Blue | Green

  //   union Figure size: Int = 
  //   | Circle r: Int
  //   | Rectangle width: Int heigth: Int
  // """ trimIndent2