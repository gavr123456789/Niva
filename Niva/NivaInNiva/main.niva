type Program 
  readFile: [String -> String]
  walkDir: [String -> List::String]


// input = """
//   type Person
//     name: String
//     age: Int
// """ trimIndent

// statements = TestParse withInput: input expectedCount: 1
// stringExpr = statements at: 0

  input = """
    type Person
      name: String
      age: Int
  """ trimIndent

  statements = TestParse withInput: input expectedCount: 1
  typeDecl = statements at: 0

  | typeDecl 
  | TypeDecl => [
      Assert 
        that: typeDecl name
        equals: "Person"
      Assert
        that: typeDecl fields count
        equals: 2
      
      name = typeDecl fields at: 0
      age = typeDecl fields at: 1
      
      Assert that: name name equals: "name"
      Assert that: age name  equals: "age"

      Assert that: name type_ name equals: "String"
      Assert that: age type_ name  equals: "Int"
      
      Unit
    ]
  |=> [TO DO: "It should be int, but it " + typeDecl toString]