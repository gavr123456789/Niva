type Program
  readFile: [String -> String]
  walkDir: [String -> List::String]

resolver = [
  fileMain = """
    
    type Person name: String age: Int wallet: Wallet
    type Wallet money: Int


    // no such type Money
    Money make::Int -> Int = [^1]
 
  """

  fileMoney = """

    type Money ofPerson: Person
  """


  statements  = TestParse withInput: fileMain expectedCount: -1
  statements2 = TestParse withInput: fileMoney expectedCount: -1
  listOfFilesContents = #{"main.niva" statements "money.niva" statements2} 
  db = TyperDB new

  // эта штука должна принимать мапу строка к списку стейтментов файла
  TypeDeclVisitor db: db, 
    visitAllTypesThenTypesAndMethods: listOfFilesContents

] do

failingComment = [
  input = """
    1 + 2
    //sas
    // uu
    3 / 4
  """
  statements = TestParse withInput: input expectedCount: 2

]




returnTest = [
  input = """
    [a + b]

    // typed args with comma
    [ a::Int, b::Int ->
      1 inc
    ]

    // typed args no comma
    [ a::Int b::Int ->
      1 inc
    ]

    // untyped args with comma
    [ a, b ->
      1 inc
    ]

    // untyped args no comma
    [ a b ->
      1 inc
    ]

    // empty
    []

    // no args
    [a b inc]

    // unary after
    ["sas"] do

    // call with args
    [x::Int, y::Int -> x + y] x: 1 y: 2
  """ trimIndent

  input2 = """
  [a b] do
  """

  statements = TestParse withInput: input expectedCount: 7
  statements echo
] 

opTest = [
  LexTest checkThat: ". . ." 
          equals: {
                   TokenType.Dot
                   TokenType.Dot
                   TokenType.Dot
                  }
]

  unions = """
    union Color = Red | Blue | Green

    union Figure size: Int = 
    | Circle r: Int
    | Rectangle width: Int heigth: Int
  """ trimIndent