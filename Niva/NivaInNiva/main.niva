type Program 
  readFile: [String -> String]
  walkDir: [String -> List::String]

  // input = "1 + 2 inc"

  // statements = TestParse withInput: input expectedCount: 1
  // "\n\n\n" echo
  // typeDecl = statements at: 0


msgSend = TestParse expression: "a + b"
msgSend debug
  // | msgSend 
  // | BinaryMsg => [
  //   Assert 
  //     that: msgSend args count
  //     equals: 1
    
  //   first = msgSend args at: 0
  //   Assert that: first name token lexeme equals: "+"
  //   expr = first expr
  //   | expr 
  //   | Identifier => [
  //     name = expr name
  //     Assert that: name equals: "b"
  //   ]
  //   |=> TO DO: "It should be UnaryMsg, but it " + expr toString

  //   receiver = msgSend receiver
  //   | receiver 
  //   | Identifier => [
  //     name = receiver name
  //     Assert that: name equals: "a"
  //   ]
  //   |=> TO DO: "It should be Identifier, but it " + receiver toString
  // ]
  // |=> TO DO: "It should be MessageSend, but it " + msgSend toString