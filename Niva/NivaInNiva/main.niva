type Program
  io: IO
  
type IO
  readFile: [String -> String]
  walkDir: [String -> List::String]


/// takes fileNames to Content
type NivaCompiler 
/// takes main file and collects all the files for compilation
type NivaBuildSystem


type ResolverHelper
  fileToStatements: Map(String, List::Statement) 
  db: TyperDB

constructor ResolverHelper resolve: fileToContent::Map(String, String) -> ResolverHelper  = [

  fileToStatements::mut Map(String, List::Statement) = #{}!
  fileToContent forEach: [ file, content ->
    statements = TestParse withInput: content expectedCount: -1
    fileToStatements at: file put: statements
  ]
   
  db = TyperDB new

  msgDecls = TypeDeclVisitor db: db, 
    visitAllTypesThenTypesAndMethods: fileToStatements

  MsgDeclVisitor new processBodyes: msgDecls db: db

  ^ ResolverHelper fileToStatements: fileToStatements db: db
]

resolver = [
  fileMain = """
    type Person age: Int 
    
    Person getAge -> Int = [
      1 toString inc
    ]
    
  """


  result = ResolverHelper resolve: #{"main" fileMain}
  db = result db
  typedAst = result fileToStatements at: "main", unpackOrPANIC
  msgDecl = typedAst at: 1

  
] 

sass = [
  msgSend = TestParse expression: "1 + 2 inc"
  msgSend echo
] do


constructorTest = [

  fileMain = """
    type Point x: Int y: Int 
    constructor Point new -> Point = Point x: 0 y: 0
  """

  statements  = TestParse withInput: fileMain expectedCount: -1
  listOfFilesContents = #{"main" statements} 
  db = TyperDB new

  statements debug

  // msgDecls = TypeDeclVisitor db: db, 
  //   visitAllTypesThenTypesAndMethods: listOfFilesContents

  // MsgDeclVisitor new processBodyes: msgDecls db: db

] 

parsing = [
  input = """
    | 3
    | 1 => 6
    | 2 => 5
    | 3 => 4
  """ trimIndent

  statements = TestParse withInput: input expectedCount: 1
  unaryDecl = statements at: 0
  unaryDecl debug
] 



returnTest = [
  
  fileMain = """
    // type Money declared in a different file
    Int make::Wallet sas::Person -> Int = [
      x::Int = 42
      1 inc dec
      2 inc
    ]

    type Person age: Int 
    type Wallet money: Int

  """

  statements  = TestParse withInput: fileMain expectedCount: -1
  listOfFilesContents = #{"main" statements} 
  db = TyperDB new

  msgDecls = TypeDeclVisitor db: db, 
    visitAllTypesThenTypesAndMethods: listOfFilesContents

  MsgDeclVisitor new processBodyes: msgDecls db: db

  mainPkg = db packages at: "main", unpackOrPANIC

  mainPkg types keys debug
  mainPkg types at: "Person", unpackOrPANIC
  mainPkg types at: "Wallet", unpackOrPANIC

] 
 
// add = [a::Int -> [b::Int -> a + b]]
// a = add a: 1
// b = a b: 2
// b echo

// add a: 40, b: 2, echo

  // unions = """
  //   union Color = Red | Blue | Green

  //   union Figure size: Int = 
  //   | Circle r: Int
  //   | Rectangle width: Int heigth: Int
  // """ trimIndent2