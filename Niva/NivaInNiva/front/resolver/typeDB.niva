type TyperDB 
  // setOfTypeNames: mut Set::String
  listOfErrors: mut List::ResolveErrors
  listOfDeclaredTypes: mut List::TypeT

  packages: mut Map(String, NivaPkg)

  // caches
  internalTypesCache: mut Map(String, NivaType) // types from Core pkg
  typesWithSameNames: mut Map(String, mut Set::NivaType)


constructor TyperDB new -> TyperDB = [
  // for now I wont add core types to typesWithSameNames db
  // just inside search method check if its name from core, then return from core cache

  corePkg = NivaPkg core
  ^TyperDB 
    // setOfTypeNames: #()! 
    listOfErrors: {}!
    listOfDeclaredTypes: {}!
    packages: #{"core" corePkg}!
    internalTypesCache: corePkg types
    typesWithSameNames: #{}!
    
]


Project protocol: "adding"


/// adds method to protocol, if no such protocol - creates it
NivaPkg addMethod: m::NivaMethod toProtocol: protocolName::String forType::NivaType= [
  // find type to protocols list or create a new list with new protocol
  // find new protocol in a list or create a new protocol
  // add method to protocol

  createNewProtocol = [
    newProtocol = NivaProtocol name: protocolName
    newProtocol addMethod: m
    newProtocol  
  ]
  
  foundProtocols = protocols at: forType
  | foundProtocols
  | null => [
    newProtocol = createNewProtocol do
    protocols at: forType put: {newProtocol}!
    "added method" + m name + " to new protocol $protocolName", log
  ]
  |=> [
    protocol = foundProtocols find: [it name == protocolName]
    | protocol
    | null => [
      // no such protocol -> create it
      newProtocol = createNewProtocol do
      foundProtocols add: newProtocol
      "added method" + m name + " to new protocol $protocolName", log
    ]
    |=> [
      protocol addMethod: m
      "added method" + m name + " to protocol $protocolName", log
    ]  
  ]

]

/// adds ne method for db, if protocol is null then adds to "common"
TyperDB addNewMethod: m::NivaMethod forType::NivaType inProtocol::String? = [
  pkg = packages at: forType pkgName
  | pkg 
  | null => TO DO: "no pkg"
  |=> pkg 
        addMethod: m 
        toProtocol: (inProtocol unpackOrValue: "common") 
        forType: forType

]

TyperDB addNewPkgIfNotExists: pkgName::String = [
  packages containsKey: pkgName, ifFalse: [
    packages at: pkgName put: (NivaPkg name: pkgName)
  ]
]

TyperDB addNewType: t::TypeT inPkg: pkgName::String = [
  // 1 add to pkg
  // find the pkg
  pkg = packages at: pkgName
  | pkg
  | null => TO DO: "Compiler bug: cant find pkg $pkgName"
  |=> [
    pkg types at: t name put: t
  ]

  setMaybe = typesWithSameNames at: t name

  | setMaybe
  | null => [
    // create set
    newSet::mut Set::NivaType = #()!
    newSet add: t
    typesWithSameNames at: t name put: newSet
  ]
  |=> [
    // add type to set
    setMaybe add: t
  ]
]


Project protocol: "finding"


NivaPkg findMethodInAllProtocols: name::String forType::NivaType -> NivaMethod = [
  protocol = protocols at: forType, unpackOrPANIC

  // knownMethods::mut List::String = {}!

  protocol forEach: [p -> 
    method = p methods at: name
    | method 
    | null => [
      // knownMethods add: name
      null
    ]
    |=> ^ method
  ]
  // its not in the one of the protocols
  // ^ null

  typeName = forType name
  TO DO: "Compiler bug: Method $name not found for type $typeName"
]

TyperDB 
  findMsgFromReceiver: receiver::NivaType 
  byName: name::String -> NivaMethod = [
  
  pkg = packages at: receiver pkgName, unpackOrPANIC
  method = pkg findMethodInAllProtocols: name forType: receiver
  
  ^ method
] 

TyperDB 
  findByTypeName: typeName::String =
  .findByTypeName: typeName inPkg: null

TyperDB 
  findByTypeName: typeName::String 
  inPkg: pkgName::String? -> NivaType = [

  // if core return from cache 
  typeName isCoreType ifTrue: [
    result = internalTypesCache at: typeName

   ^| result
    | null => TO DO: "internal type: $typeName is not in core pkg" // compiler bug, not user error, so token wont be needed
    |=> result
  ] 

  // its not core type
  // so use typesWithSameNames
  
  result = | pkgName
  | null => [
    // we dont know the pkg, so search type in every pkg
    sameNameType = typesWithSameNames at: typeName
    knownNames = typesWithSameNames keys
    | sameNameType
    | null => TO DO: "Bug: Cant find type $typeName in typesWithSameNames, known: $knownNames"
    |=> [
      | sameNameType count == 1
      | true => [
        // found only one type in the pkg
        ^ sameNameType first
      ]
      | false => TO DO: "There are many types with the same name: $sameNameType, please specify pkg like pkg.type"
    ]
  ]
  |=> [
    // we know the pkg, so search for type in it
    pkg = packages at: pkgName
    | pkg
    | null => [TO DO: "No such package as $pkgName, known pkgs: $packages"]
    |=> [
      foundType = pkg types at: typeName
      | foundType
      | null => [TO DO: "No such type: $typeName in $pkgName"]
      |=> [
        ^ foundType
      ]
    ]
  ]
  ^ result
]

