type TyperDB 
  // setOfTypeNames: mut Set::String
  listOfErrors: mut List::ResolveErrors
  listOfDeclaredTypes: mut List::TypeT

  packages: mut Map(String, NivaPkg)

  // caches
  internalTypesCache: mut Map(String, NivaType) // types from Core pkg
  typesWithSameNames: mut Map(String, mut Set::NivaType)


constructor TyperDB new -> TyperDB = [
  // for now I wont add core types to typesWithSameNames db
  // just inside search method check if its name from core, then return from core cache

  corePkg = NivaPkg core
  ^TyperDB 
    // setOfTypeNames: #()! 
    listOfErrors: {}!
    listOfDeclaredTypes: {}!
    packages: #{"core" corePkg}!
    internalTypesCache: corePkg types
    typesWithSameNames: #{}!
    
]


Project protocol: "adding"


/// adds method to protocol, if no such protocol - creates it
NivaPkg addMethod: m::NivaMethod toProtocol: protocolName::String forType::NivaType= [
  protocols at: forType, unpack: [ protocolsList ->
    // we have concrete protocol where method should be created

    // 1) find the protocol
    // 2) add method to it
    commonProtocol = protocolsList find: [it name == "common"]
    | commonProtocol
    | null => [
      // no common proto -> create it
      common = NivaProtocol name: "common"
      common addMethod: m
      protocolsList add: common
      Unit
    ]
    |=> commonProtocol addMethod: m
  ]
  "added " + m name, echo
]

/// adds ne method for db, if protocol is null then adds to "common"
TyperDB addNewMethod: m::NivaMethod forType::NivaType inProtocol::String? = [
  // find pkg
  pkg = packages at: forType pkgName

  pkg unpack: [
    it protocols at: forType, unpack: [ protocols ->
      | inProtocol
      | null => it addMethod: m toProtocol: "common" forType: forType
      |=> it addMethod: m toProtocol: inProtocol forType: forType
    ]
  ]
]

TyperDB addNewPkgIfNotExists: pkgName::String = [
  packages containsKey: pkgName, ifFalse: [
    packages at: pkgName put: (NivaPkg name: pkgName)
  ]
]

TyperDB addNewType: t::TypeT inPkg: pkgName::String = [
  // 1 add to pkg
  // find the pkg
  pkg = packages at: pkgName
  | pkg
  | null => TO DO: "Compiler bug: cant find pkg $pkgName"
  |=> [
    pkg types at: "name" put: t
    Unit
  ]

  setMaybe = typesWithSameNames at: t name

  | setMaybe
  | null => [
    // create set
    newSet::mut Set::NivaType = #()!
    newSet add: t
    typesWithSameNames at: t name put: newSet
  ]
  |=> [
    // add type to set
    setMaybe add: t
  ]
]


Project protocol: "finding"


NivaPkg findMethodInAllProtocols: name::String forType::NivaType -> NivaMethod = [
  protocol = protocols at: forType, unpackOrPANIC

  knownMethods::mut List::String = {}!

  protocol forEach: [p -> 
    method = p methods at: name
    | method 
    | null => [
      knownMethods add: name
      method // Thats stupid
    ]
    |=> ^ method
  ]

  typeName = forType name
  TO DO: "Compiler bug: Method $name not found for type $typeName"
]

TyperDB 
  findMsgFromReceiver: receiver::NivaType 
  byName: name::String -> NivaMethod = [
  
  // protocols are inside packages
  // TO DO: receiver toString
  pkg = packages at: receiver pkgName, unpackOrPANIC
  method = pkg findMethodInAllProtocols: name forType: receiver

  ^ method
] 

TyperDB 
  findByTypeName: typeName::String =
  .findByTypeName: typeName inPkg: null

TyperDB 
  findByTypeName: typeName::String 
  inPkg: pkgName::String? -> NivaType = [

  // if core return from cache 
  typeName isCoreType ifTrue: [
    result = internalTypesCache at: typeName

   ^| result
    | null => TO DO: "internal type: $typeName is not in core pkg" // compiler bug, not user error, so token wont be needed
    |=> result
  ] 

  // its not core type
  // so use typesWithSameNames
  
  result = | pkgName
  | null => [
    // we dont know the pkg, so search type in every pkg
    sameNameType = typesWithSameNames at: typeName
    knownNames = typesWithSameNames keys
    | sameNameType
    | null => TO DO: "Bug: Cant find type $typeName in typesWithSameNames, known: $knownNames"
    |=> [
      | sameNameType count == 1
      | true => [
        // found only one type in the pkg
        ^ sameNameType first
      ]
      | false => TO DO: "There are many types with the same name: $sameNameType, please specify pkg like pkg.type"
    ]
  ]
  |=> [
    // we know the pkg, so search for type in it
    pkg = packages at: pkgName
    | pkg
    | null => [TO DO: "No such package as $pkgName, known pkgs: $packages"]
    |=> [
      foundType = pkg types at: typeName
      | foundType
      | null => [TO DO: "No such type: $typeName in $pkgName"]
      |=> [
        ^ foundType
      ]
    ]
  ]
  ^ result
]

