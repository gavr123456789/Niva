  
// Test recursiveMessageDeclaration = [
  // shoud be error, but there are no way to typeChecks errors for now
// ]

Test wrongArgTypeError = [
  fileMain = """
    type Person name: String
    p = Person name: 234
    q = Person name: 'c'
    w = Person name: true
  """


  result = ResolverHelper resolve: #{"main" fileMain} entryPoint: "main"
  db = result db
  typedAst = result fileToStatements at: "main", unpackOrPANIC  

  Assert that: db listOfErrors count equals: 3
]

Test scopeVariables = [
  fileMain = """
    a = 0
    codeBlock = [
      b = 1
      b inc
      codeblock2 = [
        c = 2
        a inc
      ]
    ]
  """


  result = ResolverHelper resolve: #{"main" fileMain} entryPoint: "main"
  db = result db
  typedAst = result fileToStatements at: "main", unpackOrPANIC  
]


Test constructorCall = [
  fileMain = """
    type Person age: Int 
    Int sas = [
      p = Person age: 27
    ]
    
  """


  result = ResolverHelper resolve: #{"main" fileMain} entryPoint: "main"
  db = result db
  typedAst = result fileToStatements at: "main", unpackOrPANIC
  msgDecl = typedAst at: 1
  
  | msgDecl
  | MessageDecl => [
    varDecl = msgDecl body typedBody2 at: 0

    | varDecl
    | VarDeclarationT => [
      kwMsg = varDecl value
      | kwMsg
      | KeywordMsgT => [
        Assert that: kwMsg kind equals: MessageSendKind.Constructor
      ]
      |=> TO DO
    ]
    |=> []


  ]
  |=> [TO DO]
  
]

Test getter = [

  fileMain = """
    type Person age: Int 
    
    Person getAge -> Int = [
      this age
    ]
    
  """


  result = ResolverHelper resolve: #{"main" fileMain} entryPoint: "main"
  db = result db
  typedAst = result fileToStatements at: "main", unpackOrPANIC
  msgDecl = typedAst at: 1
  | msgDecl
  | MessageDecl => [
    getter = msgDecl body typedBody2 at: 0
    ast = getter
    | ast 
    | UnaryMsg => [
      Assert that: ast kind equals: MessageSendKind.Getter
    ]
    |=> []
  ]
  |=>[TO DO]  
]

Test resolveAFewDeclarations = [
  
  fileMain = """
    // type Money declared in a different file
    Int make::Wallet sas::Person -> Int = [
      x::Int = 42
      1 inc dec
      2 + 3
    ]

    type Person age: Int 
    type Wallet money: Int

  """

  statements  = TestParse withInput: fileMain expectedCount: -1
  listOfFilesContents = #{"main" statements} 
  db = TyperDB new

  msgDecls = TypeDeclVisitor db: db, 
    visitAllTypesThenTypesAndMethods: listOfFilesContents
    entryPointStatements: statements

  MsgDeclVisitor new processBodyes: msgDecls db: db

  typesWereRegistered = [
    mainPkg = db packages at: "main", unpackOrPANIC
    mainPkg types at: "Person", unpackOrPANIC
    mainPkg types at: "Wallet", unpackOrPANIC
  ] do

  makeSas = msgDecls at: 0, y
  checkExpressionsTypes = [
    Assert 
      that: makeSas body typedBody2 count  
      equals: 3
      andSay: "wrong number of expressions"
   
    varDecl = makeSas body typedBody2 at: 0
    unary = makeSas body typedBody2 at: 1
    binary = makeSas body typedBody2 at: 2

    Assert that: varDecl typeInfo t name equals: "Unit"
    Assert that: unary typeInfo t name equals: "Int"
    Assert that: binary typeInfo t name equals: "Int"
    
  ] do
]