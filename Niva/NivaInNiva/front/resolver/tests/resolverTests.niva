Test resolveAFewDeclarations = [
  
  fileMain = """
    // type Money declared in a different file
    Int make::Wallet sas::Person -> Int = [
      x::Int = 42
      1 inc dec
      2 + 3
    ]

    type Person age: Int 
    type Wallet money: Int

  """

  statements  = TestParse withInput: fileMain expectedCount: -1
  listOfFilesContents = #{"main" statements} 
  db = TyperDB new

  msgDecls = TypeDeclVisitor db: db, 
    visitAllTypesThenTypesAndMethods: listOfFilesContents

  MsgDeclVisitor new processBodyes: msgDecls db: db

  typesWereRegistered = [
    mainPkg = db packages at: "main", unpackOrPANIC
    mainPkg types at: "Person", unpackOrPANIC
    mainPkg types at: "Wallet", unpackOrPANIC
  ] do

  makeSas = msgDecls at: 0, y
  checkExpressionsTypes = [
    Assert 
      that: makeSas body typedBody count  
      equals: 3
      andSay: "wrong number of expressions"
   
    varDecl = makeSas body typedBody at: 0
    unary = makeSas body typedBody at: 1
    binary = makeSas body typedBody at: 2

    Assert that: varDecl nivaType name equals: "Integer"
    Assert that: unary nivaType name equals: "Integer"
    Assert that: binary nivaType name equals: "Integer"
    
  ] do
]