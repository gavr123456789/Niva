union NivaType name: String pkgName: String = 
| UnitT
| IntegerT
| FloatT
| DoubleT
| BoolT
| CharT
| StringT
| AnyT
| NothingT
// complex
| TypeT  fields: mut List::TypeTField genericArgs: mut List::NivaType
| UnionT  branches: List::UnionTBranch
| FuntionT fields: List::TypeTField // method or lambda
// collections
| ListT t: NivaType
| SetT t: NivaType
| MapT k: NivaType v: NivaType
// utility
| UnresolvedGenericT letter: String
| NullT
| NullableT v: NivaType

type TypeTField name: String typeT: NivaType
type UnionTBranch name: String typeT: NivaType

constructor TypeT noFieldsWithName: name::String pkgName::String= TypeT name: name pkgName: pkgName fields: {}! genericArgs: {}!
constructor UnresolvedGenericT name::String = NothingT name: name pkgName: "core"
constructor UnitT new    = UnitT    name: "Unit"    pkgName: "core"
constructor IntegerT new = IntegerT name: "Integer" pkgName: "core"
constructor FloatT new   = FloatT   name: "Float"   pkgName: "core"
constructor DoubleT new  = DoubleT  name: "Double"  pkgName: "core"
constructor BoolT new    = BoolT    name: "Bool"    pkgName: "core"
constructor StringT new  = StringT  name: "String"  pkgName: "core"
constructor CharT new    = CharT    name: "Char"    pkgName: "core"

constructor AnyT new     = AnyT     name: "Any"     pkgName: "core"
constructor NothingT new = NothingT name: "Nothing" pkgName: "core"
constructor NullT new    = NullT    name: "Null"    pkgName: "core"

constructor ListT t::NivaType            = ListT t: t     name: "List" pkgName: "core"
constructor SetT t::NivaType             = SetT t: t      name: "Set"  pkgName: "core"
constructor MapT k::NivaType v::NivaType = MapT k: k v: v name: "Map"  pkgName: "core"



  // receiver: NivaType // not needed since we always getting it from type, which is already represent receiver
type NivaMethod 
  name: String 
  args: List::TypeTField
  returnType: NivaType
  forMut: Bool
  possibleErrors: List::UnionT


type NivaProtocol 
  name: String 
  methods: mut Map(String, NivaMethod)

type NivaPkg 
  name: String 
  types: mut Map(String, NivaType)
  protocols: mut Map(NivaType, mut List::NivaProtocol)
  

constructor NivaPkg name::String = NivaPkg name: name types: #{}! protocols: #{}!
constructor NivaProtocol name::String = NivaProtocol name: name methods: #{}!
constructor NivaProtocol common = NivaProtocol name: "common" methods: #{}!
constructor NivaMethod name::String args::List::TypeTField returnType::NivaType forMut::Bool = NivaMethod 
  name: name 
  args: args
  returnType: returnType
  forMut: forMut
  possibleErrors: {}

NivaProtocol addMethod::NivaMethod = [
  methods at: addMethod name put: addMethod
]




constructor TypeTField binary: t::NivaType = TypeTField name: "" typeT: t

/// create basic types like String Int List
constructor NivaPkg core -> NivaPkg = [
  // create all primitive types
  char = CharT new
  int = IntegerT new
  float = FloatT new
  double = DoubleT new
  str = StringT new
  bool = BoolT new
  nill = NullT new
  unit = UnitT new 
  // utils
  nothing = NothingT new
  any = AnyT new
  // T
  t = UnresolvedGenericT name: "T"
  // create collections
  list = ListT t: t
  map = MapT k: t v: t
  set = SetT t: t
  // create Int Protocol
  intProtocol = NivaProtocol intArithmetics: int bool: bool


  corePkg = NivaPkg name: "core" types: #{
    "Bool" bool
    "Unit" unit 
    "String" str
    "Int" int 
    "Float" float 
    "Dobule" double

    "Null" nill
    "Nothing" nothing 
    "Any" any

    "List" list 
    "Set" set 
    "Map" map 
  }! protocols: #{
    int ({intProtocol}!)
  }!

  ^ corePkg
]




// -----



//
Project protocol: "toString"

TypeT toString -> String = [
  // TODO genericArgs
  strFields = fields joinWith: " " transform: [
    it name + ": " + it typeT toString
  ]
  ^ " Type(" + name + " " + strFields + ")"
]

IntegerT toString -> String = " Type(" + name + ")" 
StringT  toString -> String = " Type(" + name + ")"
FloatT   toString -> String = " Type(" + name + ")"
BoolT    toString -> String = " Type(" + name + ")"

