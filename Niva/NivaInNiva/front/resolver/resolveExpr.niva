Expr toTypedExprFromDb: db::TyperDB withContext: c::Context -> TypedExpr2 = [
  

 ^| this
  | CharExpr    => TO DO //TypedExpr nivaType: (db findByTypeName: "Char") exprAst: this
  | IntExpr     => TO DO //TypedExpr nivaType: (db findByTypeName: "Int") exprAst: this
  | FloatExpr   => TO DO //TypedExpr nivaType: (db findByTypeName: "Float") exprAst: this
  | DoubleExpr  => TO DO //TypedExpr nivaType: (db findByTypeName: "Double") exprAst: this
  | StringExpr  => TO DO //TypedExpr nivaType: (db findByTypeName: "String") exprAst: this
  | BooleanExpr => TO DO //TypedExpr nivaType: (db findByTypeName: "Boolean") exprAst: this
  | NullExpr    => TO DO //TypedExpr nivaType: (db findByTypeName: "Nothing") exprAst: this
  // Identifier can be type itself like Unit
  | Identifier     => [
    varType = c lookupForVar: this name
    | varType
    | null => [
      // this identifier can be name of the type and just a constructor call  
      name first isUpperCase ifTrue: [
        q = db findByTypeName: name
        TO DO //TypedExpr nivaType: (TypeOfTheType v: q) exprAst: this
      ] ifFalse: [
        TO DO: "Cant find $this in the current context"
      ]
    ]
    |=> TO DO //TypedExpr nivaType: varType exprAst: this
    
  ]
  | ExprInBrackets => value toTypedExprFromDb: db withContext: c
  | ListLiteral    => [
    elements resolve: db withContext: c
    // Compare all elements between each other
    TO DO: "ListLiteral to TypedExpr"]
  | SetLiteral     => [
    elements resolve: db withContext: c
    TO DO: "SetLiteral to TypedExpr"]
  | MapLiteral     => TO DO: "MapLiteral to TypedExpr" 

  | UnaryMsg   => [
    // replacing every expr inside typeAndExpr with typedExpr to be able to tell the types of each arg
    // this args isEmpty, ifTrue: [TO DO: "Compiler bug: unary without args is like a single identifier"]
      typedExpr = .resolveFromDb: db withContext: c
      ^ typedExpr
    ]
  | BinaryMsg  => [
    this args isEmpty, ifTrue: [TO DO: "Compiler bug: binary without args"]
    
    {x y} = .replaceArgsWithTypedfromDb: db withContext: c

    ^ TO DO //
//    ^TypedExpr
//      exprAst: x
//      nivaType: y
//      isMutable: false
//      token: token
    ]
  | KeywordMsg =>[ 
    this args isEmpty, ifTrue: [TO DO: "Compiler bug: keyword without args is like a single identifier"]
    kek = .resolveKeywordFromDb: db withContext: c

    ^kek 
    ]

  | VarDeclaration  => [

    typedExpr = this value toTypedExprFromDb: db withContext: c
    // check that ast type is the same as declared
    this astType unpack: [
      // x::Int = "ars"
      nivaType = db findByTypeName: it name
      typedExpr t nivaType compareWith: nivaType, ifFalse: [
        valName = name
        astTypeName = it name
        realTypeName = typedExpr t nivaType name
        // TODO add it to error list
        TO DO: "Type declared for $valName is not equal for it's value type $astTypeName != $realTypeName"
      ]
    ]

    c defineVar: name withType: typedExpr t nivaType
    TO DO //
//    TypedExpr
//      nivaType: typedExpr nivaType
//      exprAst: typedExpr
//      isMutable: typedExpr isMutable
  ]
  | Assign => TO DO
  | DestructingAssign => TO DO
  | ReturnStatement => TO DO: "ReturnStatement to TypedExpr"

  | CodeBlock => [
    body unTypedBody isEmpty ifTrue: [
      TO DO //TypedExpr nivaType: (db findByTypeName: "Unit") exprAst: this
    ] ifFalse: [
      body resolve: db withContext: c
      TO DO //
//      TypedExpr
//        nivaType: body typedBody last nivaType
//        exprAst: this
    ]
  ]
  | Match     => TO DO: "Match to TypedExpr"


  // result = TypedExpr nivaType: TO DO isMutable: TO DO
  // ^ result
]


type Tuple x: T y: G 

KeywordMsg getNameFromArgs -> String = [
  ^ args joinWith: ":" transform: [
    it name name
  ], + ":"
]
KeywordMsg resolveKeywordFromDb: db::TyperDB withContext: c::Context -> TypedExpr2 = [
  receiverTypedExpr = receiver toTypedExprFromDb: db withContext: c

  typedArgs = args map: [ kwArg -> 
    {name expr} = kwArg
    typedExpr = expr toTypedExprFromDb: db withContext: c
    NameAndExpr name: name expr: typedExpr
  ]
  
  // так стоп, а как мы храним кейворды? вмеесте с :, потому что в этой реализации мы не разделяем сообщения по видам в базе
  foundMsg = db 
    findMsgFromReceiver: receiverTypedExpr t nivaType
    byName: .getNameFromArgs
  

  newKeyword = KeywordMsg 
    args: typedArgs 
    receiver: receiverTypedExpr 
    token: token
    kind: foundMsg kind
  ^TO DO //
//  ^TypedExpr
//    exprAst: newKeyword
//    nivaType: foundMsg returnType
//    isMutable: false
//    token: token
] 


BinaryMsg replaceArgsWithTypedfromDb: db::TyperDB withContext: c::Context -> Tuple(BinaryMsg, NivaType) = [ 
  receiverTypedExpr = receiver toTypedExprFromDb: db withContext: c

  typeOfReceiver = receiverTypedExpr t nivaType
  mut lastType = typeOfReceiver

  typedArgs = args map: [ binary ->
    // 1 + (2 inc)
    // find the message
    // resolce type of arg
    // compare that found message has arg with same type
    binaryName = binary name name
    dbMsg = db findMsgFromReceiver: lastType  byName: binaryName
    (dbMsg args count != 1) ifTrue: [TO DO: "Compiler bug, binary $dbMsg args != 1 in db"]
    dbArg = dbMsg args first
    // resolve type of arg
    resolvedArg = binary expr toTypedExprFromDb: db withContext: c


    (resolvedArg t nivaType compareWith: dbArg typeT) ifFalse: [
      expected = dbMsg args first typeT
      butGot = resolvedArg t nivaType
      currentBinary = lastType toString + " " + binaryName + " " 
      TO DO: "In binary $currentBinary arg of type $expected expected, but got $butGot"
    ]

    // create typed expr with return type of dbMsg in db message

    typed = TO DO //    TypedExpr
//      exprAst: binary name
//      nivaType: dbMsg returnType
//      isMutable: false
//      token: binary name token

    lastType <- dbMsg returnType
    NameAndExpr name: binary name expr: typed
  ]

  newBinary = BinaryMsg args: typedArgs receiver: receiverTypedExpr token: token
  ^ Tuple x: newBinary y: lastType 
] 


UnaryMsg resolveFromDb:  db::TyperDB withContext: c::Context -> TypedExpr2 = [
  resolvedReceiver = receiver toTypedExprFromDb: db withContext: c
  typeOfReceiver = resolvedReceiver t nivaType
  dbMsg = db findMsgFromReceiver: typeOfReceiver  byName: selector name

  newUnary = UnaryMsg 
    receiver: resolvedReceiver 
    selector: selector
    token: token
    kind: dbMsg kind

  typed = TO DO//TypedExpr
//    exprAst: newUnary
//    nivaType: dbMsg returnType
//    isMutable: dbMsg forMut
//    token: selector token


  ^ typed
]