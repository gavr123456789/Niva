constructor NivaProtocol intArithmeticsFromDefaultTypes: dtc::DefaultTypesContainer  -> NivaProtocol = [
  {int str bool unit} = dtc

  intProtocol = NivaProtocol name: "arithmetic" 

  // unary
  // intProtocol addMethod: (NivaMethod unary: "echo" returnT: unit)
  intProtocol addMethod: (NivaMethod unary: "inc" receiverType: int returnT: int)
  intProtocol addMethod: (NivaMethod unary: "dec" receiverType: int returnT: int)
  intProtocol addMethod: (NivaMethod unary: "toString" receiverType: int returnT: str)
  // binary
  intProtocol addMethod: (NivaMethod binary: "+" receiverType: int argT: int  returnT: int)
  intProtocol addMethod: (NivaMethod binary: "-" receiverType: int argT: int  returnT: int)
  intProtocol addMethod: (NivaMethod binary: "*" receiverType: int argT: int  returnT: int)
  intProtocol addMethod: (NivaMethod binary: "/" receiverType: int argT: int  returnT: int)
  intProtocol addMethod: (NivaMethod binary: "%" receiverType: int argT: int  returnT: int)

  intProtocol addMethod: (NivaMethod binary: "==" receiverType: int argT: bool  returnT: int)
  intProtocol addMethod: (NivaMethod binary: "!=" receiverType: int argT: bool  returnT: int)

  ^intProtocol
]


constructor NivaProtocol stringFromDefaultTypes: dtc::DefaultTypesContainer  -> NivaProtocol = [
  {int str bool char unit} = dtc

  strProto = NivaProtocol name: "common" 
  // unary
  strProto addMethod: (NivaMethod unary: "echo" receiverType: str returnT: unit)
  strProto addMethod: (NivaMethod unary: "toString" receiverType: str returnT: str)
  strProto addMethod: (NivaMethod unary: "count" receiverType: str returnT: int)
  strProto addMethod: (NivaMethod unary: "isEmpty" receiverType: str returnT: bool)
  // binary
  strProto addMethod: (NivaMethod binary: "+" receiverType: str argT: str returnT: str)
  
  strProto addMethod: (NivaMethod binary: "==" receiverType: str argT: str returnT: bool)
  strProto addMethod: (NivaMethod binary: "!=" receiverType: str argT: str returnT: bool)

  // keyword
  strProto addMethod: (NivaMethod singleArgKw: "at" receiverType: str argT: int returnT: bool )
  strProto addMethod: (NivaMethod singleArgKw: "contains" receiverType: str argT: str returnT: bool )
  strProto addMethod: (NivaMethod singleArgKw: "drop" receiverType: str argT: int returnT: str )
  strProto addMethod: (NivaMethod singleArgKw: "dropLast" receiverType: str argT: int returnT: str )

  ^strProto
]


constructor NivaProtocol boolFromDefaultTypes: dtc::DefaultTypesContainer  -> NivaProtocol = [
  {str bool unit} = dtc

  boolProto = NivaProtocol name: "common" 

  // unary
  boolProto addMethod: (NivaMethod unary: "echo" receiverType: bool returnT: unit)
  boolProto addMethod: (NivaMethod unary: "toString" receiverType: bool returnT: str)
  boolProto addMethod: (NivaMethod unary: "not" receiverType: bool returnT: bool)
  // binary
  boolProto addMethod: (NivaMethod binary: "==" receiverType: bool argT: bool returnT: bool)
  boolProto addMethod: (NivaMethod binary: "!=" receiverType: bool argT: bool returnT: bool)
  boolProto addMethod: (NivaMethod binary: "||" receiverType: bool argT: bool returnT: bool)
  boolProto addMethod: (NivaMethod binary: "&&" receiverType: bool argT: bool returnT: bool)

  // keyword
  noArgs = FuntionT args: {} name: "noFields" pkgName: "core" returnType: unit
  boolProto addMethod: (NivaMethod singleArgKw: "ifTrue"  receiverType: bool argT: noArgs returnT: unit )
  boolProto addMethod: (NivaMethod singleArgKw: "ifFalse" receiverType: bool argT: noArgs returnT: unit )

  ^boolProto
]

constructor NivaProtocol anyFromDefaultTypes: dtc::DefaultTypesContainer  -> NivaProtocol = [
  {str bool unit any} = dtc

  anyProto = NivaProtocol name: "common" 

  // unary
  anyProto addMethod: (NivaMethod unary: "echo" receiverType: any returnT: unit)
  anyProto addMethod: (NivaMethod unary: "toString" receiverType: any returnT: str)
  // binary
  anyProto addMethod: (NivaMethod binary: "==" receiverType: any argT: any returnT: bool)
  anyProto addMethod: (NivaMethod binary: "!=" receiverType: any argT: any returnT: bool)

  // keyword
  ^anyProto
]

// helpers
constructor NivaMethod unary: name::String receiverType::NivaType returnT::NivaType = 
  NivaMethod name: name :receiverType args: {} returnType: returnT forMut: false protocolName: "common" pkgName: "core"

constructor NivaMethod binary: name::String receiverType::NivaType argT::NivaType returnT::NivaType  = 
  NivaMethod name: name :receiverType args: {(TypeTField binary: argT)} returnType: returnT forMut: false protocolName: "common" pkgName: "core"

constructor NivaMethod singleArgKw: name::String receiverType::NivaType argT::NivaType returnT::NivaType  = 
  NivaMethod name: name + ":" :receiverType args: {(TypeTField name: name typeT: argT)} returnType: returnT forMut: false protocolName: "common" pkgName: "core"