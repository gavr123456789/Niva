constructor NivaProtocol intArithmeticsFromDefaultTypes: dtc::DefaultTypesContainer  -> NivaProtocol = [
  {int str bool unit} = dtc

  intProtocol = NivaProtocol name: "arithmetic" 

  // unary
  // intProtocol addMethod: (NivaMethod unary: "echo" returnT: unit)
  intProtocol addMethod: (NivaMethod unary: "inc" returnT: int)
  intProtocol addMethod: (NivaMethod unary: "dec" returnT: int)
  intProtocol addMethod: (NivaMethod unary: "toString" returnT: str)
  // binary
  intProtocol addMethod: (NivaMethod binary: "+" argT: int returnT: int)
  intProtocol addMethod: (NivaMethod binary: "-" argT: int returnT: int)
  intProtocol addMethod: (NivaMethod binary: "*" argT: int returnT: int)
  intProtocol addMethod: (NivaMethod binary: "/" argT: int returnT: int)
  intProtocol addMethod: (NivaMethod binary: "%" argT: int returnT: int)

  intProtocol addMethod: (NivaMethod binary: "==" argT: bool returnT: int)
  intProtocol addMethod: (NivaMethod binary: "!=" argT: bool returnT: int)

  ^intProtocol
]


constructor NivaProtocol stringFromDefaultTypes: dtc::DefaultTypesContainer  -> NivaProtocol = [
  {int str bool char unit} = dtc

  strProto = NivaProtocol name: "common" 
  // unary
  strProto addMethod: (NivaMethod unary: "echo" returnT: unit)
  strProto addMethod: (NivaMethod unary: "toString" returnT: str)
  strProto addMethod: (NivaMethod unary: "count" returnT: int)
  strProto addMethod: (NivaMethod unary: "isEmpty" returnT: bool)
  // binary
  strProto addMethod: (NivaMethod binary: "+" argT: str returnT: str)
  
  strProto addMethod: (NivaMethod binary: "==" argT: str returnT: bool)
  strProto addMethod: (NivaMethod binary: "!=" argT: str returnT: bool)

  // keyword
  strProto addMethod: (NivaMethod singleArgKw: "at" argT: int returnT: bool )
  strProto addMethod: (NivaMethod singleArgKw: "contains" argT: str returnT: bool )
  strProto addMethod: (NivaMethod singleArgKw: "drop" argT: int returnT: str )
  strProto addMethod: (NivaMethod singleArgKw: "dropLast" argT: int returnT: str )

  ^strProto
]


constructor NivaProtocol boolFromDefaultTypes: dtc::DefaultTypesContainer  -> NivaProtocol = [
  {str bool unit} = dtc

  boolProto = NivaProtocol name: "common" 

  // unary
  boolProto addMethod: (NivaMethod unary: "echo" returnT: unit)
  boolProto addMethod: (NivaMethod unary: "toString" returnT: str)
  boolProto addMethod: (NivaMethod unary: "not" returnT: bool)
  // binary
  boolProto addMethod: (NivaMethod binary: "==" argT: bool returnT: bool)
  boolProto addMethod: (NivaMethod binary: "!=" argT: bool returnT: bool)
  boolProto addMethod: (NivaMethod binary: "||" argT: bool returnT: bool)
  boolProto addMethod: (NivaMethod binary: "&&" argT: bool returnT: bool)

  // keyword
  noArgs = FuntionT args: {} name: "noFields" pkgName: "core" returnType: unit
  boolProto addMethod: (NivaMethod singleArgKw: "ifTrue"  argT: noArgs returnT: unit )
  boolProto addMethod: (NivaMethod singleArgKw: "ifFalse" argT: noArgs returnT: unit )

  ^boolProto
]

constructor NivaProtocol anyFromDefaultTypes: dtc::DefaultTypesContainer  -> NivaProtocol = [
  {str bool unit any} = dtc

  anyProto = NivaProtocol name: "common" 

  // unary
  anyProto addMethod: (NivaMethod unary: "echo" returnT: unit)
  anyProto addMethod: (NivaMethod unary: "toString" returnT: str)
  // binary
  anyProto addMethod: (NivaMethod binary: "==" argT: any returnT: bool)
  anyProto addMethod: (NivaMethod binary: "!=" argT: any returnT: bool)

  // keyword
  ^anyProto
]

// helpers
constructor NivaMethod unary: name::String returnT::NivaType = 
  NivaMethod name: name args: {} returnType: returnT forMut: false protocolName: "common" pkgName: "core"

constructor NivaMethod binary: name::String argT::NivaType returnT::NivaType  = 
  NivaMethod name: name args: {(TypeTField binary: argT)} returnType: returnT forMut: false protocolName: "common" pkgName: "core"

constructor NivaMethod singleArgKw: name::String argT::NivaType returnT::NivaType  = 
  NivaMethod name: name + ":" args: {(TypeTField name: name typeT: argT)} returnType: returnT forMut: false protocolName: "common" pkgName: "core"