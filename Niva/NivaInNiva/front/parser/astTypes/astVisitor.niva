union ResolveErrors =
| ErrorNoSuchType tok: Token


union AstVisitor =
| PrintingVisitor //sb: StringBuilder
| TypeDeclVisitor db: TyperDB 

AstVisitor run: statements::List::Statement= [
  statements forEach: [
    this visit: it
  ]
]

PrintingVisitor visit: st::Statement = [
  st echo
  "--------------" echo
]


TypeDeclVisitor visitAllTypesThenTypesAndMethods: fileToStatements::Map(String, List::Statement)= [


  pkgTotypeDecls::mut Map(String, TypeDecl) = #{}!
  msgDecls::mut Map(String, MessageDecl) = #{}!
  noFieldsTypes::mut Map(String, TypeT) = #{}!


  // first iteration, fill the lists of statements, create pkgs
  fileToStatements forEach: [file, statements -> 
    pkgName = file

    db addNewPkgIfNotExists: pkgName

    // TODO unions, enums, aliases
    // save all types (without fields), and msg decls
    statements forEach: [
      | it
      | TypeDecl => [
        noFieldsType = TypeT noFieldsWithName: it name pkgName: pkgName
        noFieldsTypes at: it name put: noFieldsType
        pkgTotypeDecls at: pkgName put: it
      ]
      | MessageDecl => msgDecls at: pkgName put: it
      | UnionDecl => TO DO: "UnionDecl"
      | EnumDecl => TO DO: "EnumDecl"
      |=> []
    ]
  ]

  fillTypesAndMessages = [
    pkgTotypeDecls forEach: [ pkgName, typeDecl ->
      readyToAddToDBType = .fillFields: typeDecl knownTypeNames: noFieldsTypes
      readyToAddToDBType unpack: [
        db addNewType: it inPkg: pkgName
        it name + " type added to db", echo
      ]
    ]
    

    // msg decls resolving
    // here we should have all the types resolved
    msgDecls forEach: [ pkg, msg ->
      // get real type for receiver
      receiverType = db findByTypeName: msg receiver name inPkg: null // we cant know the concrete pkg here
      // get real type for each arg
      argsT = msg args map: [ arg ->
        argAstType = arg astType name
        argType = db findByTypeName: argAstType inPkg: null // we cant know the concrete pkg here
        TypeTField name: arg name typeT: argType
      ]



      getReturnType = [
        rt = msg returnType 
        | rt 
        | null => db findByTypeName: "Unit" inPkg: null 
        |=> db findByTypeName: rt name inPkg: null 
      ]

      
      astOfReceiver = msg receiver 
      isMutable = | astOfReceiver
      | AstType => astOfReceiver isMut
      | AstLambdaType => false

      method = NivaMethod name: msg name args: argsT returnType: (msg getReturnTypeFromDb: db) forMut: isMutable
      db addNewMethod: method forType: receiverType inProtocol: null
      "added method " + method name, echo
    ]
  
  ] do


  
]


MessageDecl getReturnTypeFromDb: db::TyperDB -> NivaType = [
  rt = returnType
 ^| rt
  | null => db findByTypeName: "Unit" inPkg: null 
  |=> db findByTypeName: rt name inPkg: null 
]

/// returns a type with fields filled with real types, ready to add to db
/// returns null if such type was not found in knownTypeNames or db
/// and adds that as error to listOfErrors
TypeDeclVisitor fillFields: st::TypeDecl knownTypeNames::mut Map(String, TypeT) -> TypeT? = [

  typeStub = knownTypeNames at: st name


  | typeStub
  | null => [
    db listOfErrors add: (ErrorNoSuchType tok: st token)
    ^ null
  ]
  |=> [
    fields = st fields forEach: [
      fieldName = it astType name
      knownNames = knownTypeNames keys
      // search in known types, if not found search in db, db always has core types, 
      // known types contains every type from AST decls
      maybeFieldType = knownTypeNames at: fieldName
      fieldType = | maybeFieldType
      | null => db findByTypeName: fieldName inPkg: null
      |=> maybeFieldType


      field = TypeTField name: it name typeT: fieldType
      typeStub fields add: field
    ]

    ^ typeStub
  ]
]


/// if it is, we can get type from catche(core pkg)
String isCoreType -> Bool = 
  | this
  | "String" 
  | "Int" 
  | "Bool"

  | "Double" 
  | "Float"

  | "Unit"

  | "List"
  | "Map"
  | "Set" => true
  |=> false

AstVisitor visit: st::Statement = | this
| PrintingVisitor => this visit: st
| TypeDeclVisitor => [
  | st
  | TypeDecl => this visit: st
  |=>[]
    Unit
]


// todo go deep to call visitor on each child note
Statement accept: visitor::AstVisitor = 
| this
| Expr => [
  visitor visit: this
  this exprAccept: visitor
]
| Declaration => this declAccept: visitor
| VarDeclaration => [
  visitor visit: this
  this value exprAccept: visitor
]
| Assign => [
  visitor visit: this
  this value exprAccept: visitor
]
| DestructingAssign => [
  visitor visit: this
  this value exprAccept: visitor
]


Expr exprAccept: visitor::AstVisitor -> Unit = 
| this
| LiteralExpr | Identifier | ReturnStatement => [visitor visit: this]
| ExprInBrackets => [
  this value exprAccept: visitor
]
| CollectionLiteral => [
  this elements forEach: [it exprAccept: visitor]
]
| MessageSend2 => [
  | this
  | UnaryMsg => [
    visitor visit: this
  ]
  | BinaryMsg => [
    this args forEach: [it expr exprAccept: visitor]
    visitor visit: this
  ]
  | KeywordMsg => [
    this args forEach: [it expr exprAccept: visitor]
    visitor visit: this
  ]

]
| CodeBlock => [
  TO DO
]




Declaration declAccept: visitor::AstVisitor -> Unit = 
| this
| TypeDecl =>  visitor visit: this

| EnumDecl => visitor visit: this
| UnionDecl => visitor visit: this
| MessageDecl => [
  // Cant visit receiver type and return types since they are not declarations
  visitor visit: this
  this body forEach: [it accept: visitor]
]
