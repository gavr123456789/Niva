// type NonEmptyList = List::T
// constructor NonEmptyList first::T -> List::T = 
//   {first}

union Statement token: Token =
| ^Expr
| ^Declaration

// TODO maybe replace with union
// union Body2 = 
// | TypedBody v: List::TypedExpr 
// | UntypedBody v: List::Expr 

type Body 
  typedBody: mut List::TypedExpr
  unTypedBody: List::Expr



union Declaration token: Token = 
| TypeDecl name: String fields: List::TypeField
| EnumDecl 
| UnionDecl name: String generalFields: List::TypeField branches: List::TypeDecl
| MessageDecl 
  receiver: AstType2
  name: String 
  args: List::NameAndAstType // 0 = unary, 1 = binary, 2+ = keyword
  returnType: AstType2?
  body: Body
  isSingleExpr: Bool
  isConstructor: Bool


// Messages
enum MessageKind = Unary | Binary | Keyword

TypeDecl toString -> String = [
  fields = fields joinWith: " "
  ^ "type " + name + (fields isNotEmpty ifTrue: [" "] ifFalse: [""]) + fields
]

// simple keyword
// 1 from: 2 to: 3
// {{name: "" expr: 1}, {name: "from" expr: 2}, {name: "to" expr: 3}}

// simple binary
// 1 + 2
// {{name: "" expr: 1}, {name: "+" expr: 2}}

// simple unary
// 1 inc dec
// {{name: "dec" expr: {name: "inc" expr: 1}}}

union MessageSend receiver: Expr token: Token =
| UnaryMsg 
    args: List::NameAndExpr // expr and name are the same Identifiers, this is done to be able to replace exprs with typed ones
| BinaryMsg
    args: List::NameAndExpr // expr - Primary or UnaryMsg
| KeywordMsg
    args: List::NameAndExpr // expr - Primary or UnaryMsg or BinaryMsg

UnaryMsg toString = [
  realArgs = args joinWith: " " transform: [it name name]
  ^ "UnaryMsg ($receiver $realArgs)"
]
BinaryMsg toString = [
  realArgs = args joinWith: " " transform: [
    it name name + " " + it expr toString
  ]
  ^ "$receiver $realArgs"
]
KeywordMsg toString = [
  realArgs = args joinWith: " " transform: [
    it name toString + ": " + it expr toString
  ]
  ^ "$receiver $realArgs"
]

// | x 
// | 5 | 6 | 7 => [body] // condition: 5, conditions: 6 7
// | 4 => body
type MatchBranch 
  condition: Expr
  conditions: Body
  body: Body


// Expressions
union Expr token: Token = 
| ^LiteralExpr 
| Identifier     name: String path: {String}?
| ExprInBrackets value: Expr
| VarDeclaration    name: String value: Expr astType: AstType2?
| Assign            name: String value: Expr
| DestructingAssign names: List::String value: Expr // {name} = person

| ^CollectionLiteral
| ^MessageSend
| ReturnStatement value: Expr?
// only one of the lists can be non empty
| CodeBlock args: List::NameAndAstType untypedArgs: List::Identifier body: Body
| Match 
  subject: Expr 
  branches: List::MatchBranch 
  elseBranch: Body? // possible body
| TypedExpr 
  exprAst: Expr
  nivaType: NivaType
  isMutable: Bool




constructor TypedExpr nivaType::NivaType exprAst::Expr isMutable::Bool = TypedExpr 
  exprAst: exprAst
  nivaType: nivaType
  isMutable: isMutable
  token: exprAst token

  constructor TypedExpr nivaType::NivaType exprAst::Expr = TypedExpr 
  exprAst: exprAst
  nivaType: nivaType
  isMutable: false
  token: exprAst token

Identifier toString = "$name"


/// path will be empty when
constructor Identifier fromToken::Token = 
  Identifier name: (fromToken lexeme) token: fromToken path: null
  
ExprInBrackets toString = "($value)"


type NameAndExpr name: Identifier expr: Expr

type NameAndAstType name: String astType: AstType2
NameAndAstType toString = [
  ^ "$name::$astType"
]

// Types
union AstType2 tok: Token name: String = 
| AstType 
  nullable: Bool 
  genericParams: List::AstType2
  isMut: Bool 
| AstLambdaType 
  args: List::AstType2
  returnType: AstType2

AstType toString = [
  genericParamsStr = genericParams joinWith: "::" transform: [it toString]
  ^ "$name$genericParamsStr"
]

constructor AstType name::String nullable::Bool genericParams::List::AstType tok::Token = AstType 
  name: name 
  nullable: nullable
  genericParams: genericParams
  isMut: false
  tok: tok

constructor AstType name::String tok::Token = AstType 
  name: name 
  nullable: false
  genericParams: {}
  isMut: false
  tok: tok

extend mut AstType [
  on setMutable::Bool = isMut <- setMutable
]



union CollectionLiteral token: Token elements: Body = 
| ListLiteral
| SetLiteral
| MapLiteral

union LiteralExpr token: Token = 
| CharExpr
| IntExpr num: Int
| FloatExpr
| DoubleExpr
| StringExpr
| BooleanExpr
| NullExpr
// | UnitExpr

IntExpr toString = "IntExpr $num"


// Map(Int, String)
// name: Map
// genericParams: {
//   (name: Int ...),
//   (name: String, ...)
//}

// List::Set::Int
// name: List
// genericParams: {
//    (name: Set, 
//     genericParams: {
//       name: Int, ...
//     }
//    )
//}

// union Type = 
// | UserType name: String fields: Map(String, Type)
// | ^InternalType

// union InternalType = 
// | StringAstType
// | IntAstType
// | BooleanAstType
// | FloatAstType
// | DoubleAstType




// Int ses -> Int = [
//   Error throwWithMessage: "rst"
//   ^ 5
// ]

// y = 1 ses inc
// y 



// Pipes
// 1 from: 2, inc
// UnaryMsg args: {"inc"} receiver: (KeywordMsg) token: TO DO

// Simple Unary
// 1 inc
// UnaryMsg args: {"inc"} receiver: 1 token: TO DO
// 1 inc dec
// UnaryMsg args: {"inc", "dec"} receiver: 1 token: TO DO

// Simple Binary
// 1 + 2 + 3
// BinaryMsg args: {{"+" 2}, {"+" 3}} receiver: 1 token: TO DO

// 1 inc dec + 2 inc dec
// unary1 = UnaryMsg args: {"inc", "dec"} receiver: 1
// unary2 = UnaryMsg args: {"inc", "dec"} receiver: 2
// BinaryMsg 
//   receiver: unary1 
//   args: {(name: "+" expr: unary2)} 

// Simple Keyword
// 1 from: 2 to: 3
// KeywordMsg args: {{"from" 2}, {"to" 3}} receiver: 1 

// 1 inc from: 2 to: 3
// KeywordMsg args: {{"from" 2}, {"to" 3}} receiver: (UnaryMsg args: {"inc"} receiver: 1)

// 1 inc + 2 dec from: 3 inc + 4 dec
// unary3 = Unary receiver: 3 args: {"inc"}
// unary4 = Unary receiver: 4 args: {"dec"}
// KeywordMsg
//   args: {{"from" unary3}, {"to" unary4}}
//   receiver: BinaryMsg
//     args: {{"+" 2}, {"+" 4}}
//     receiver: UnaryMsg
//       args: {"inc"}

