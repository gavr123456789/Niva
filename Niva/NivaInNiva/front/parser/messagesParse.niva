extend mut Parser [

  /// inc inc inc
  on parseManyIdent -> MutableList::Identifier = [
    result::MutableList::Identifier = {}m
    
    mut c = true
    [c] whileTrue: [
      tok = .peek

      | tok kind 
      | TokenType.Identifier => [
        // stop if new unary on new line
        result isNotEmpty && (tok line > result last token line), ifTrue: [
          c <- false
        ] ifFalse: [
          identifier = .step
          expr = (Identifier name: (tok lexeme) token: tok)
          result add: expr
          Unit
        ]
      ]
      |=> [
        c <- false
      ]
    ]
    // "parseManyIdent $result" echo
    ^result
  ]

  /// + 2 inc inc + 3 dec dec
  on parseManyBinary -> List::NameAndExpr = [
      result::MutableList::NameAndExpr = {}m
      mut c = true
      [c] whileTrue: [
        tok = .peek
        // tok lexeme echo
        // this is double check for binary, we already did it on the call side
        // ... but we still need it for "recursion" to get the next +
        | tok kind 
        | TokenType.BinarySymbol => [
          binarySymbol = .step
          // binarySymbol kind echo
          // + ^1 inc inc + 2
          .peek kind == TokenType.OpenBrace, ifTrue: [TO DO: "1 + (...) not implemented yet"]
          receiver = (.primary: .step) unpackOrMsg: "Cant find primary" // TODO тут может быть не праймари, а унари, или в скобках что угодно поэтому парсить нужно не праймари, не, надо просто добавить в парсинг праймари скобочных выражений
          // + 1^ inc inc + 2
          unaryList = .peek line == receiver token line, ifTrue: [
            .parseManyIdent
          ] ifFalse: [{}m]


          unaryList isEmpty, ifTrue: [
            // + 1 + 2
            binSymbol = Identifier fromToken: tok
            result add: (NameAndExpr name: (binSymbol) expr: receiver)
          ] ifFalse: [
            unary = UnaryMsg args: unaryList toList receiver: receiver token: tok
            // + 1 inc inc + 2
            binSymbol = Identifier fromToken: tok
            result add: (NameAndExpr name: (binSymbol) expr: unary)
          ]

          Unit
        ]
        |=> [
          c <- false
          Unit
        ]
      ]
      ^ result toList
    ]
]

