type TestParse 
constructor TestParse withInput::String expectedCount::Int -> MutableList::Statement = [
  tokens = Lexer newLex: withInput
  // tokens debug
  {statements} = Parser newParseTokens: tokens
  Assert that: statements count equals: expectedCount
  ^statements
]

constructor TestParse expression::String -> Expr = [
  expr = Parser newParseTokens: (Lexer newLex: expression), statements at: 0
  
  ^| expr
  | Expr=> expr
  |=> [TO DO: "It should be Expr, but it " + expr toString]
]



Test parseSimbleBinaryMsg -> Unit! = [
  msgSend = TestParse expression: "a + b"

  | msgSend 
  | BinaryMsg => [
    Assert 
      that: msgSend args count
      equals: 1
    
    first = msgSend args at: 0
    Assert that: first name token lexeme equals: "+"
    expr = first expr
    | expr 
    | Identifier => [
      name = expr name
      Assert that: name equals: "b"
    ]
    |=> TO DO: "It should be UnaryMsg, but it " + expr toString

    receiver = msgSend receiver
    | receiver 
    | Identifier => [
      name = receiver name
      Assert that: name equals: "a"
    ]
    |=> TO DO: "It should be Identifier, but it " + receiver toString
  ]
  |=> TO DO: "It should be MessageSend, but it " + msgSend toString
]

Test parseBinaryMsgWithUnary -> Unit! = [
  msgSend = TestParse expression: "1 + 2 inc"

  | msgSend 
  | BinaryMsg => [
    Assert 
      that: msgSend args count
      equals: 1
    
    first = msgSend args at: 0
    Assert that: first name token lexeme equals: "+"
    expr = first expr
    | expr 
    | UnaryMsg => [
      Assert that: expr args count equals: 1
      first = expr args at: 0
      name = first token lexeme
      Assert that: name equals: "inc"
      receiver = expr receiver
      | receiver
      | IntExpr => Assert that: receiver num  equals: 2
      |=> TO DO: "It should be IntExpr, but it " + expr toString
    ]
    |=> TO DO: "It should be UnaryMsg, but it " + expr toString
  ]
  |=> TO DO: "It should be MessageSend, but it " + msgSend toString
]

Test parseBinaryMsgWithUnary2 -> Unit! = [
  msgSend = TestParse expression: "1 inc + 2"

  | msgSend 
  | BinaryMsg => [
    Assert 
      that: msgSend args count
      equals: 1
    
    first = msgSend args at: 0
    Assert 
      that: first name token lexeme 
      equals: "+"

    // "+ 2" arg
    expr = first expr
    | expr 
    | IntExpr => [
      Assert that: expr num  equals: 2
    ]
    |=> TO DO: "It should be UnaryMsg, but it " + expr toString

    // "1 inc" receiver 
    receiver = msgSend receiver
    | receiver
    | UnaryMsg => [
      Assert that: receiver args count equals: 1
      first = receiver args at: 0
      name = first token lexeme
      Assert that: name equals: "inc"
      receiver = receiver receiver
      | receiver
      | IntExpr => Assert that: receiver num  equals: 1
      |=> TO DO: "It should be IntExpr, but it " + receiver toString
    ]
    |=> TO DO: "It should be UnaryMsg, but it " + receiver toString
    ]
  |=> TO DO: "It should be MessageSend, but it " + msgSend toString
]



Test parseNumber -> Unit! = [
  input = """
  123
  """ trimIndent

  tokens = Lexer newLex: input
  statements::MutableList::Statement = {}m
  parser:: mut Parser = Parser tokens: tokens current: 0 statements: statements // {}m error TODO
  intExpr = parser literalExprFrom: tokens first, unpackOrPANIC
  | intExpr 
  | IntExpr => 
    Assert 
      that: intExpr num  
      equals: 123
  |=> [TO DO: "It should be int, but it $intExpr"]
]

Test parseString -> Unit! = [
  tokens = Lexer newLex: """ "sas" """
  statements::MutableList::Statement = {}m
  parser:: mut Parser = Parser tokens: tokens current: 0 statements: statements // {}m error TODO
  stringExpr = parser literalExprFrom: tokens first, unpackOrPANIC
  | stringExpr 
  | StringExpr => 
    Assert 
      that: stringExpr token lexeme
      equals: "\"sas\""
  |=> [TO DO: "It should be int, but it " + stringExpr toString]
]


Test parseType -> Unit! = [
  input = """
    type Person
      name: String
      age: Int
  """ trimIndent

  statements = TestParse withInput: input expectedCount: 1
  typeDecl = statements at: 0

  | typeDecl 
  | TypeDecl => [
      Assert 
        that: typeDecl name
        equals: "Person"
      Assert
        that: typeDecl fields count
        equals: 2
      
      name = typeDecl fields at: 0
      age = typeDecl fields at: 1
      
      Assert that: name name equals: "name"
      Assert that: age name  equals: "age"

      Assert that: name type_ name equals: "String"
      Assert that: age type_ name  equals: "Int"

      Unit
    ]
  |=> [TO DO: "It should be int, but it " + typeDecl toString]
]

Test parseUnaryDecl -> Unit! = [
  input = """
    Int inc -> Boolean = [ 
      1
    ]
  """ trimIndent

  statements = TestParse withInput: input expectedCount: 1
  unaryDecl = statements at: 0

  | unaryDecl 
  | MessageDecl => [
      Assert 
        that: unaryDecl name
        equals: "inc"
      Assert
        that: unaryDecl args count
        equals: 0
      
      {receiver returnType} = unaryDecl
      
      Assert 
        that: receiver name 
        equals: "Int"
      Assert 
        that: returnType unpackOrPANIC name 
        equals: "Boolean"
    ]
  |=> [TO DO: "It should be MessageDecl, but it " + unaryDecl toString]
]

Test parseBinaryDecl -> Unit! = [
  input = """
    Int + inc::String -> Boolean = [
      1
    ]
  """ trimIndent

  statements = TestParse withInput: input expectedCount: 1
  binary = statements at: 0

  | binary 
  | MessageDecl => [
    Assert 
      that: binary name
      equals: "+"
    Assert
      that: binary args count
      equals: 1
    
    {receiver returnType} = binary
    
    Assert 
      that: receiver name 
      equals: "Int"
    Assert 
      that: returnType unpackOrPANIC name 
      equals: "Boolean"
    ]
  |=> [TO DO: "It should be MessageDecl, but it " + binary toString]
]


Test parseAstTypeList -> Unit! = [
  input = """
    List::List::Int
  """ trimIndent

  tokens = Lexer newLex: input
  // tokens debug
  statements::MutableList::Statement = {}m
  parser:: mut Parser = Parser tokens: tokens current: 0 statements: statements // {}m error TODO
  astType = parser parseType
  
  Assert that: astType genericParams count equals: 1
  list = astType genericParams at: 0

  Assert that: list name equals: "List"
  
]

Test parseAstTypeMap -> Unit! = [
  input = """
    Map(Int, String)
  """ trimIndent

  tokens = Lexer newLex: input
  // tokens debug
  statements::MutableList::Statement = {}m
  parser:: mut Parser = Parser tokens: tokens current: 0 statements: statements // {}m error TODO
  astType = parser parseType

  Assert that: astType genericParams count equals: 2
  int = astType genericParams at: 0
  string = astType genericParams at: 1
  Assert that: int name equals: "Int"
  Assert that: string name equals: "String"
] 

// Test parseUnary -> Unit! = [
//   statements = TestParse withInput: "1 inc" expectedCount: 1

//   1 inc
//   MessageSend 
//     args: {
//       (NameAndExpr name: "inc" expr: Expr)
//     } 
//     token: tokenTypes.Token eof




//   intExpr = statements at: 3
//   | intExpr 
//   | IntExpr => 
//     Assert 
//       that: intExpr num  
//       equals: 4
//   |=> [TO DO: "It should be int, but it $intExpr"]
// ]
