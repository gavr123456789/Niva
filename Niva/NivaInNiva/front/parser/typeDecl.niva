extend mut Parser [
  /// `name: String`
  on typeFields -> List::TypeField = [
    // type can have no fields
    .peek kind == TokenType.IdentifierColon ifFalse: [^ {}]
    result::mut List::TypeField = {}!

    mut c = true
    [c] whileTrue: [
      tok = .peek
      tok kind == TokenType.IdentifierColon ifTrue: [
        .step // skip 

        type_ = .parseType
        type_field = TypeField name: (tok lexeme) type_: type_ 
        result add: (type_field)
        // need continue?
        c <- .peek kind == TokenType.IdentifierColon 
      ] ifFalse: [
        c <- false
      ]
    ]

    ^ result toList
  ]

  /// type ^name (field1: astType)*
  on typeDeclaration: tok::Token -> TypeDecl = [

    res = TypeDecl 
      name: (.step lexeme)
      fields: (.typeFields)
      token: tok
    // res debug
    // .statements add: res
    ^ res
  ]
  /// union name = (| (field1: astType)*)*
  /// union Color = Red | Blue | Green
  /// union Car genericField = Foo field1: Int | Bar field2: Int
  on unionTypeDeclaration: tok::Token -> UnionDecl = [
    name = .step lexeme
    generalFields = .typeFields

    .matchAssert: TokenType.Assign
    .matchString: "|" // first optional pipe

    branches:: mut List::TypeDecl = {}
    branchesParse = [
      mut c = true
      [c] whileTrue: [
        .peek kind == TokenType.Identifier ifTrue: [
          branches add: (.typeDeclaration: .peek)
          c <- .match: TokenType.If
          Unit
        ] ifFalse: [
          c <- false
        ]
      ]

    ] do

    res = UnionDecl name: name generalFields: generalFields branches: branches token: tok 

    ^ res
  ]

]