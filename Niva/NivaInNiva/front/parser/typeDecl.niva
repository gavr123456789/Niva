extend mut Parser [
  /// `name: String`
  on typeFields -> List::TypeField = [
    .peek kind == TokenType.IdentifierColon, assert: "Expected `field:`"
    result::MutableList::TypeField = {}m

    mut c = true
    [c] whileTrue: [
      tok = .peek
      tok kind == TokenType.IdentifierColon ifTrue: [
        .step // skip 

        type_ = .parseType
        type_field = TypeField name: (tok lexeme) type_: type_ // dropLast: 1, ":"
        result add: (type_field)
        // need continue?
        c <- .peek kind == TokenType.IdentifierColon 
      ] ifFalse: [
        c <- false
      ]
    ]

    ^ result toList
  ]

  /// type name (field1: astType)*
  on typeDeclaration: tok::Token -> Statement = [
    // type name (field1: astType)*

    res = TypeDecl 
      name: (.step lexeme)
      fields: (.typeFields)
      token: tok
    // res debug
    // .statements add: res
    ^ res
  ]

]