Test parseType -> Unit! = [
  input = """
    type Person
      name: String
      age: Int
      intList: List::Int
      nullableInt: Int?
      lambdaType: [Int -> Int]
  """ trimIndent

  statements = TestParse withInput: input expectedCount: 1
  typeDecl = statements at: 0

  | typeDecl 
  | TypeDecl => [
      Assert 
        that: typeDecl name
        equals: "Person"
      Assert
        that: typeDecl fields count
        equals: 5
      
      name = typeDecl fields at: 0
      age = typeDecl fields at: 1
      intList = typeDecl fields at: 2
      nullableInt = typeDecl fields at: 3
      lambda = typeDecl fields at: 4
      
      Assert that: name name equals: "name"
      Assert that: age name  equals: "age"
      Assert that: intList name  equals: "intList"
      Assert that: nullableInt name  equals: "nullableInt"

      type1 = name type_
      | type1
      | AstType => 
        Assert that: type1 name equals: "String"
      |=> TO DO: "It should be AstType, but it " + type1 toString

      type2 = age type_
      | type2
      | AstType => 
        Assert that: type2 name equals: "Int"
      |=> TO DO: "It should be AstType, but it " + type2 toString

      type3 = intList type_
      | type3
      | AstType => [
        Assert that: type3 name equals: "List"
        Assert that: type3 genericParams count equals: 1
        Assert that: type3 nullable equals: false
        genericListParam = type3 genericParams at: 0
        | genericListParam
        | AstType => Assert that: genericListParam name equals: "Int"
        |=> TO DO: "int expected"
        ]
      |=> TO DO: "It should be AstType, but it " + type3 toString
      
      type4 = nullableInt type_
      | type4
      | AstType => [
        Assert that: type4 name equals: "Int"
        Assert that: type4 nullable equals: true
      ]
      |=> [TO DO: "It should be AstType, but it " + type4 toString]

      type5 = lambda type_
      | type5
      | AstLambdaType => [
        Assert that: true equals: true
      ]
      |=> [TO DO: "It should be AstType, but it " + type4 toString]

      Unit
    ]
  |=> [TO DO: "It should be int, but it " + typeDecl toString]
]

Test parseTypeWithNoFields -> Unit! = [
  input = """
    type Person
  """ trimIndent

  statements = TestParse withInput: input expectedCount: 1
  typeDecl = statements at: 0

  | typeDecl 
  | TypeDecl => [
      Assert 
        that: typeDecl name
        equals: "Person"
      Assert
        that: typeDecl fields count
        equals: 0
  ]
  |=> []
]

Test parseUnion -> Unit! = [
  input = """
    union Color = Red | Blue | Green

    union Figure size: Int = 
    | Circle r: Int
    | Rectangle width: Int heigth: Int
    

  """ trimIndent

  statements = TestParse withInput: input expectedCount: 2
  keyword = statements at: 0

]


Test parseUnaryDecl -> Unit! = [
  input = """
    Int inc -> Boolean = [ 
      1
    ]
  """ trimIndent

  statements = TestParse withInput: input expectedCount: 1
  unaryDecl = statements at: 0

  | unaryDecl 
  | MessageDecl => [
      Assert 
        that: unaryDecl name
        equals: "inc"
      Assert
        that: unaryDecl args count
        equals: 0
      
      {receiver returnType} = unaryDecl
      | receiver
      | AstType => [
        Assert 
          that: receiver name 
          equals: "Int"

        Assert 
          that: returnType toString
          equals: "Boolean"

      ]
      |=> TO DO: "It should be AstType, but it " + receiver toString
    ]
  |=> [TO DO: "It should be MessageDecl, but it " + unaryDecl toString]
]

Test parseBinaryDecl -> Unit! = [
  input = """
    Int + inc::String -> Boolean = [
      1
    ]
  """ trimIndent

  statements = TestParse withInput: input expectedCount: 1
  binary = statements at: 0

  | binary 
  | MessageDecl => [
    Assert 
      that: binary name
      equals: "+"
    Assert
      that: binary args count
      equals: 1
    
    {receiver returnType} = binary
    | receiver
    | AstType => [
      Assert 
        that: receiver name 
        equals: "Int"

      Assert 
        that: returnType toString
        equals: "Boolean"
    ]
    |=> TO DO: "It should be AstType, but it " + receiver toString
  
    ]
  |=> [TO DO: "It should be MessageDecl, but it " + binary toString]
]

Test parseKeywordDecl -> Unit! = [
  input = """
    Int from::Int to::Int -> Boolean = [
      true
    ]
  """ trimIndent

  statements = TestParse withInput: input expectedCount: 1
  keyword = statements at: 0

  | keyword 
  | MessageDecl => [
    Assert 
      that: keyword name
      equals: "from"
    Assert
      that: keyword args count
      equals: 2
    
    {receiver returnType} = keyword
      | receiver
      | AstType => [
        Assert 
          that: receiver name 
          equals: "Int"

        Assert 
          that: returnType toString
          equals: "Boolean"
      ]
      |=> TO DO: "It should be AstType, but it " + receiver toString
    ]
  |=> [TO DO: "It should be MessageDecl, but it " + keyword toString]
]

Test parseRealWorldExample -> Unit! = [
  input = """

    type Person name: String age: Int
    Person sleep = "hii" echo 

  """ trimIndent

  statements = TestParse withInput: input expectedCount: 2
  keyword = statements at: 0
]