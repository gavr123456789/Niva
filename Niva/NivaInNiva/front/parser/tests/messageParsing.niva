Test someExpressions -> Unit! = [
  input = """
    1 + 2
    1 inc
    1 inc + 2
    1 + 2 inc
    a + b
    a + b inc
    a + b inc + c
    a + b inc + c dec
    a + b inc + c dec * d
    a + b inc + c dec * d / e

    // collections receivers
    {1 2 3} inc
    #{1 2 3 4} from: 5
    #(1 2 3) + #(3 4 5)

    [a b c] do
    [a b c] from: 1 to: 2
    [a b c] + 3
  """ trimIndent
  statements = TestParse withInput: input expectedCount: 16
  
]

Test pipes = [
  
  input = """
    1 to: 2, inc echo
  """ trimIndent

  statements = TestParse withInput: input expectedCount: 1
  statements at: 0
  first = statements at: 0
  | first
  | UnaryMsg => [
    receiver = first receiver
    | receiver
    | UnaryMsg => [
      expr = receiver receiver
      | expr
      | ExprInBrackets => [
        expr = expr value
        | expr
        | KeywordMsg => [
          Assert that: expr args count equals: 1
          first = expr args at: 0
          Assert that: first name token lexeme equals: "to"
          Assert that: first expr token lexeme equals: "2"
        ]
        |=> [TO DO: "It should be KeywordMsg, but it " + expr toString]
      ]
      |=> [
        TO DO: "123"
      ]

    ]
    |=> [TO DO: "It should be ExprInBrackets, but it " + receiver toString]

    Assert
      that: first selector name
      equals: "echo"

  ]
  |=> [TO DO: "It should be UnaryMsg, but it " + first toString]

]

Test pipesMany -> Unit! = [
  input = """
    1 to: 2, inc echo
    1 to: 2, inc + 3
    1 to: 2, inc + 3 dec
    1 to: 2, inc + 3 dec * 4

    1 inc, dec
    1 inc, + 2
  """ trimIndent

  statements = TestParse withInput: input expectedCount: 6
  
]

Test parseSimbleBinaryMsg -> Unit! = [
  msgSend = TestParse expression: "a + b"

  | msgSend 
  | BinaryMsg => [
    Assert 
      that: msgSend args count
      equals: 1
    
    first = msgSend args at: 0
    Assert that: first name token lexeme equals: "+"
    expr = first expr
    | expr 
    | Identifier => [
      name = expr name
      Assert that: name equals: "b"
    ]
    |=> TO DO: "It should be UnaryMsg, but it " + expr toString

    receiver = msgSend receiver
    | receiver 
    | Identifier => [
      name = receiver name
      Assert that: name equals: "a"
    ]
    |=> TO DO: "It should be Identifier, but it " + receiver toString
  ]
  |=> TO DO: "It should be MessageSend, but it " + msgSend toString
]

Test parseBinaryMsgWithUnary -> Unit! = [  
  msgSend = TestParse expression: "1 + 2 inc"
  Assert that: msgSend toString equals: "IntExpr 1 + UnaryMsg Call(IntExpr 2 inc)"
]

Test parseBinaryMsgWithUnary2 -> Unit! = [
  msgSend = TestParse expression: "1 inc + 2"

  | msgSend 
  | BinaryMsg => [
    Assert 
      that: msgSend args count
      equals: 1
    
    first = msgSend args at: 0
    Assert 
      that: first name token lexeme 
      equals: "+"

    // "+ 2" arg
    expr = first expr
    | expr 
    | IntExpr => [
      Assert that: expr num  equals: 2
    ]
    |=> TO DO: "It should be UnaryMsg, but it " + expr toString

    // "1 inc" receiver 
    receiver = msgSend receiver
    | receiver
    | UnaryMsg => [
      Assert that: receiver selector name  equals: "inc"
      receiver = receiver receiver
      | receiver
      | IntExpr => Assert that: receiver num  equals: 1
      |=> TO DO: "It should be IntExpr, but it " + receiver toString
    ]
    |=> TO DO: "It should be UnaryMsg, but it " + receiver toString
    ]
  |=> TO DO: "It should be MessageSend, but it " + msgSend toString
]


