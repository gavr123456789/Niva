type Parser
  tokens: List::Token
  current: Int 
  statements: MutableList::Statement

constructor Parser newParseTokens::List::Token = [
  statements::MutableList::Statement = {}m
  parser:: mut Parser = Parser tokens: newParseTokens current: 0 statements: statements // {}m error TODO
  [ parser done not ] whileTrue: [
    parser nextStatement 
    // parser statements last echo
  ]

  ^ parser
]


type TypeField name: String type_: AstType

extend mut Parser [
  /// if literal was added returns true
  on literalExprFrom: tok::Token -> Boolean = [
    mut isAdded = false
    addLiteral = [ lit::LiteralExpr ->
      // .step
      statements add: (lit)
      isAdded <- true
      Unit
    ]

    | tok kind
    | TokenType.Integer => [
      num = tok lexeme toInt
      addLiteral lit: (IntExpr num: num token: tok)
    ]
    | TokenType.String => 
      addLiteral lit: (StringExpr token: tok)
    
    | TokenType.True|TokenType.False => 
      addLiteral lit: (BooleanExpr token: tok)
    
    | TokenType.Char => 
      addLiteral lit: (CharExpr token: tok)
    
    | TokenType.Float => 
      addLiteral lit: (FloatExpr token: tok)
    
    | TokenType.Double => 
      addLiteral lit: (DoubleExpr token: tok)
    
    | TokenType.Null => 
      addLiteral lit: (NullExpr token: tok)
    
    |=> []
    ^isAdded
  ]



  on parseGenericPartOfType = [
    // .peek echo
    TO DO: "parseGenericPartOfType"
  ]

  on parseType -> AstType = [

    .match: TokenType.Mut, ifTrue: [
      TO DO: "add mutable modifier"
    ]
    .match: TokenType.OpenBracket, ifTrue: [
      TO DO: "parseLambda"
    ]

    tok = .peek
    isIdentifier = tok isIdentifier

    type_name = .step
    type_name isIdentifier, assert: "Expected type name"
    nullable = .matchString: "?"

    
    isThereMapLikeGenerics = .match: TokenType.OpenParen  
    isThereGenerics = tok kind == TokenType.IdentifierDoubleColon

    generics::MutableList::AstType = {}m

    (isThereGenerics) ifTrue: [
      mut c = true 
      [c] whileTrue: [
        // we already have first part - List::
        // so now we need to 
        q = .peek
        c <- q kind == TokenType.IdentifierDoubleColon

        // q kind == TokenType.IdentifierDoubleColon, ifTrue: [
        //   c <- true
        // ] ifFalse: [
        //   c <- false
        // ]
        TO DO
        Compiler debug

        c <- false
      ]

      .parseGenericPartOfType
    ]
    // isThereMapLikeGenerics = .match: TokenType.Colon  
    
    ^AstType 
      name: type_name lexeme 
      nullable: nullable
      genericParams: {} 
  ]

  /// `name: String`
  on typeFields -> List::TypeField = [
    .peek kind == TokenType.IdentifierColon, assert: "Expected `field:`"
    result::MutableList::TypeField = {}m

    mut c = true
    [c] whileTrue: [
      tok = .peek
      tok kind == TokenType.IdentifierColon ifTrue: [
        .step // skip 

        type_ = .parseType
        type_field = TypeField name: (tok lexeme) type_: type_ // dropLast: 1, ":"
        result add: (type_field)
        // need continue?
        c <- .peek kind == TokenType.IdentifierColon 
      ] ifFalse: [
        c <- false
      ]
    ]

    ^ result toList
  ]

  /// type name (field1: astType)*
  on typeDeclaration: tok::Token = [
    // type name (field1: astType)*

    res = TypeDecl 
      name: (.step lexeme)
      fields: (.typeFields)
      token: tok
    // res debug
    .statements add: res
  ]
  on nextStatement -> Unit = [
    // there always EndOfFile, so this never happen
    tokens isEmpty ifTrue: [^Unit] 
    tok = .step

    // simple literal
    .literalExprFrom: tok, ifTrue: [^Unit]


    | tok kind
    | TokenType.Type => .typeDeclaration: tok
    | TokenType.Identifier => .identifierStart: tok

    | TokenType.EndOfFile => [
      TO DO: "its impossible to be here, whileTrue from top stack goes until `done`"
      Unit
    ]
    |=> Unit

    .peek kind != TokenType.EndOfFile, ifTrue: [
      .step // just to evade infinity loop
    ]
  ]

  /// x| probably not just identifier without anything
  /// x = ...
  /// x inc ...
  /// X inc = []
  /// x + ...
  /// X + y::Int = []
  /// x that: ...
  /// X from::Int = []
  /// X from y:Int = []
  on identifierStart: tok::Token = [
    TO DO: "identifierStart not impl"
    ident = .step
    next = .step
    
  ]


  on match::TokenType -> Boolean = [
    .peek kind == match, ifTrue: [
      .step
      ^ true
    ]

    ^ false
  ]
  on matchString::String -> Boolean = [
    .peek lexeme == matchString, ifTrue: [
      .step
      ^ true
    ]

    ^ false
  ]

  on check: kind::TokenType = .peek kind == kind

  on done = .check: TokenType.EndOfFile

  on step -> Token = [
    x = .peek
    current <- current inc
    ^ x
  ]
  on peek -> Token = [
    ^tokens at: current
  ]
  on peekAt: distance::Int -> Token = [
    realDistance = current + distance
    ^tokens at: realDistance
  ]
]
