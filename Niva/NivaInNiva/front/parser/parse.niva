type Parser
  tokens: List::Token
  current: Int 
  statements: MutableList::Statement

constructor Parser newParseTokens::List::Token = [
  statements::MutableList::Statement = {}m
  parser:: mut Parser = Parser tokens: newParseTokens current: 0 statements: statements // {}m error TODO
  [ parser done not ] whileTrue: [
    parser nextStatement 
    // parser statements last echo
  ]

  ^ parser
]


extend mut Parser [
  /// if literal was added returns true
  on literalExprFrom: tok::Token -> Boolean = [
    mut isAdded = false
    addLiteral = [ lit::LiteralExpr ->
      .step
      statements add: (lit)
      isAdded <- true
      Unit
    ]

    | tok kind
    | TokenType.Integer => [
      num = tok lexeme toInt
      addLiteral lit: (IntExpr num: num token: tok)
    ]
    | TokenType.String => 
      addLiteral lit: (StringExpr token: tok)
    
    | TokenType.True|TokenType.False => 
      addLiteral lit: (BooleanExpr token: tok)
    
    | TokenType.Char => 
      addLiteral lit: (CharExpr token: tok)
    
    | TokenType.Float => 
      addLiteral lit: (FloatExpr token: tok)
    
    | TokenType.Double => 
      addLiteral lit: (DoubleExpr token: tok)
    
    | TokenType.Null => 
      addLiteral lit: (NullExpr token: tok)
    
    |=> []
    ^isAdded
  ]

  on nextStatement -> Unit = [
    // there always EndOfFile, so this never happen
    tokens isEmpty ifTrue: [^Unit] 
    tok = .peek

    // simple literal
    .literalExprFrom: tok, ifTrue: [^Unit]


    | tok kind
    | TokenType.Identifier => .identifierStart: tok

    | TokenType.EndOfFile => [
      TO DO: "its impossible to be here, whileTrue from top stack goes until `done`"
      Unit
    ]
    |=> Unit
    .step // just to evade infinity loop
  ]

  /// x| probably not just identifier without anything
  /// x = ...
  /// x inc ...
  /// X inc = []
  /// x + ...
  /// X + y::Int = []
  /// x that: ...
  /// X from::Int = []
  /// X from y:Int = []
  on identifierStart: tok::Token = [
    ident = .step
    next = .step
    

    
  ]

  on check: kind::TokenType = .peek kind == kind

  on done = .check: TokenType.EndOfFile

  on step -> Token = [
    x = .peek
    current <- current inc
    ^ x
  ]
  on peek -> Token = [
    // current == tokens count
    //   ifTrue: [^Token eof]
    ^tokens at: current
  ]
  on peekAt: distance::Int = [
    realDistance = current + distance
    // realDistance == tokens count
    //   ifTrue: [^Token eof]
    ^tokens at: realDistance
  ]
]
