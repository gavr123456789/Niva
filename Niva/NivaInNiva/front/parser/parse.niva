type Parser
  tokens: List::Token
  current: Int 
  statements: MutableList::Statement

constructor Parser newParseTokens::List::Token = [
  statements::MutableList::Statement = {}m
  parser:: mut Parser = Parser tokens: newParseTokens current: 0 statements: statements // {}m error TODO
  
  [ parser done not ] whileTrue: [
    parser statements add: parser nextStatement
  ]

  // parser statements debug

  ^ parser
]


type TypeField name: String type_: AstType2

extend mut Parser [
  /// if literal was added returns true
  on literalExprFrom: tok::Token -> LiteralExpr? = [
    mut isAdded = false
    addLiteral = [ lit::LiteralExpr ->
      // .step
      // statements add: (lit)
      lit
    ] // TODO это теперь вообщзе не надо

    ^| tok kind
    | TokenType.Integer => [
      num = tok lexeme toInt
      addLiteral lit: (IntExpr num: num token: tok)
    ]
    | TokenType.String => 
      addLiteral lit: (StringExpr token: tok)
    
    | TokenType.True|TokenType.False => 
      addLiteral lit: (BooleanExpr token: tok)
    
    | TokenType.Char => 
      addLiteral lit: (CharExpr token: tok)
    
    | TokenType.Float => 
      addLiteral lit: (FloatExpr token: tok)
    
    | TokenType.Double => 
      addLiteral lit: (DoubleExpr token: tok)
    
    | TokenType.Null => 
      addLiteral lit: (NullExpr token: tok)
    
    |=> [null]
  ]

  on parseCollection -> CollectionLiteral? = [
    ^ TO DO: "parseCollection"
    // mut isAdded = false
    // addLiteral = [ lit::LiteralExpr ->
    //   // .step
    //   // statements add: (lit)
    //   lit
    // ]

    // ^| tok kind
    // | TokenType.OpenBracket => [
    //   // parse collection
    //   mut c = true
    //   [c] whileTrue: [
    //     tok = .peek
    //     tok kind == TokenType.CloseBracket ifTrue: [
    //       .step // skip 
    //       c <- false
    //     ] ifFalse: [
    //       // parse statement
    //       statement = .nextExperssion: (.step)
    //       body add: statement
    //       Unit
    //     ]
    //   ]
    // ]
  ]


  /// collection {} #{} #()
  /// or identifier | nullableIdentifier 
  /// simple literal 1 "" '' true false 1.1 1.1f
  on primary::Token -> Expr? = [
    primary lexeme
    .literalExprFrom: primary, unpack: [
      ^it
    ]

    primary isNullOrIdentifier ifTrue: [
      ^ Identifier name: primary lexeme token: primary
    ]

    ^ null
  ]

  on parseBodyOrSingleExpr -> List::Statement = [
    // tokens map: [it kind toString + "\t\t" + it lexeme], joinWith: "\n"

    body::MutableList::Statement = {}m

    .match: TokenType.OpenBracket, ifTrue: [
      // parse body
      mut c = true
      [c] whileTrue: [
        tok = .peek
        tok kind == TokenType.CloseBracket ifTrue: [
          .step // skip 
          c <- false
        ] ifFalse: [
          // parse statement
          nextTok = .step 
          statement = .nextExperssion: nextTok
          body add: statement
          Unit
        ]
      ]
    ] ifFalse: [
      // single expression
      statement = .nextExperssion: .step
      body add: statement
    ]

    ^ body toList
  ]

  on restoreFrom: position::Int = [
    current <- position
  ]

  on nextStatement -> Statement = [
    savePosition = current

    // there always EndOfFile, so this never happen
    tokens isEmpty ifTrue: [TO DO: "no tokens, file is empty"] 
    tok = .step

    // tok kind debug

    | tok kind
    | TokenType.Type => [^ .typeDeclaration: tok]
    | TokenType.Identifier => [
      getReturnType = [
        .match: TokenType.ReturnArrow, ifTrue: [
          .parseType
        ] ifFalse: [null]
      ]

      // change current position back to parse receiver
      .stepBack
      receiverType = .parseType

      // check all possible message declarations starters
      // peek at: 1 == "=" thats unary
      // peek at 0 == IdentifierDoubleColon thats Keyword
      // peek at: 0 IdentifierColon and peek at: 1 IdentifierDoubleColon thats Keyword with local
      // peek at: 0 == BinarySymbol and peek at: 1 IdentifierDoubleColon thats Binary
      // if one of that, then just go to saved position and run nextExpression

      // Int^ inc =
      // Int^ a::Int b::Int =
      // Int^ a: q::Int b::Int =
      // Int^ + a::Int =
      tok2 = .step
      result = | tok2 kind
      | TokenType.Identifier => [
        // Int inc^ ->? = []
        
        returnType = getReturnType do 
        name = tok2 lexeme

        // .matchAssert: TokenType.Assign
        .match: TokenType.Assign, ifFalse: [
          .restoreFrom: savePosition
          ^ .nextExperssion: .step
        ]
        // Int inc ->? = ^[]

        body = .parseBodyOrSingleExpr

        msgDecl = MessageDecl 
          receiver: receiverType
          name: name
          args: {}
          returnType: returnType
          token: tok
          body: body        

        // statements add: msgDecl
        msgDecl
      ]
      | TokenType.IdentifierDoubleColon => [
        // Int inc^::Int b::Int =
        
        firstArg = NameAndType name: tok2 lexeme astType: .parseType
        kwArgs = {firstArg}m

        mut c = true 
        [c] whileTrue: [
          tok = .peek
          tok kind == TokenType.IdentifierDoubleColon ifTrue: [
            arg = NameAndType name: .step lexeme astType: .parseType
            kwArgs add: arg
            Unit
          ] ifFalse: [
            c <- false
          ]
        ]

        returnType = getReturnType do 
        name = tok2 lexeme
        
        .matchAssert: TokenType.Assign
        // Int a::Int b::Int ->? = ^[]

        body = .parseBodyOrSingleExpr

        msgDecl = MessageDecl 
          receiver: receiverType
          name: name
          args: kwArgs toList//{(NameAndType name: arg lexeme astType: argType)}
          returnType: returnType
          token: tok
          body: body 
        msgDecl
      ]
      | TokenType.BinarySymbol => [
        // Int +^ a::Int -> Int=

        // if its not binary declaration then parse expression
        arg = .step
        arg kind == TokenType.IdentifierDoubleColon, ifFalse: [
          .restoreFrom: savePosition
          ^.nextExperssion: .step
        ]
        argType = .parseType


        returnType = getReturnType do 
        name = tok2 lexeme
        
        .matchAssert: TokenType.Assign
        // Int inc ->? = ^[]

        body = .parseBodyOrSingleExpr

        msgDecl = MessageDecl 
          receiver: receiverType
          name: name
          args: {(NameAndType name: arg lexeme astType: argType)}
          returnType: returnType
          token: tok
          body: body        

        // statements add: msgDecl
        msgDecl
      ]
      |=> [
        .restoreFrom: savePosition
        ^.nextExperssion: .step
        // statements echo
        // TO DO: "222 $tok2"
      ]

      ^ result
    ]

    | TokenType.EndOfFile => [
      TO DO: "its impossible to be here, whileTrue from top stack goes until `done`"
    ]
    |=> [
      ^ .nextExperssion: tok
    ]

    

    .peek kind != TokenType.EndOfFile, ifTrue: [
      .step // just to evade infinity loop
    ]
    ///// Expressions
    // simple literal
    

    ^ TO DO: "nextStatement: no statement"
  ]


  on nextExperssion: tok::Token -> Expr = [
    primaryReceiver = .primary: tok, unpackOrMsg: "nextExperssion: no primary"
    firstExpr = .nextExperssion2: tok receiver: primaryReceiver

    ^ .peek kind == TokenType.Comma, 
      ifTrue: [
        .step // skip comma
        .nextExperssion2: tok receiver: (ExprInBrackets value: firstExpr token: tok)
      ]
      ifFalse: [firstExpr]
  ]

  on nextExperssion2: tok::Token receiver::Expr? -> Expr = [
    primaryUnaryBinary = .parsePrimaryOrUnaryOrBinary: tok receiver: receiver

    ^| .peek kind
    | TokenType.IdentifierColon => [

      result::MutableList::NameAndExpr = {}m
      mut c = true
      // parse keyword
      [c] whileTrue: [
        colon = .peek
        | colon kind
        | TokenType.IdentifierColon => [

          result add: 
            (NameAndExpr 
              name: (Identifier fromToken: .step) 
              expr: (.parsePrimaryOrUnaryOrBinary: .step))
          Unit
  
        ]
        |=> [
          c <- false
        ]
      ]
      // current debug
      
      KeywordMsg 
        args: result toList
        receiver: primaryUnaryBinary
        token: tok
    ]
    |=> primaryUnaryBinary
  ]


  // returns
  // Primary
  // UnaryMsg
  // BinaryMsg
  on parsePrimaryOrUnaryOrBinary: tok::Token -> Expr = .parsePrimaryOrUnaryOrBinary: tok receiver: null
  on parsePrimaryOrUnaryOrBinary: tok::Token receiver::Expr? -> Expr = [
    maybePrimary = | receiver 
    | null => .primary: tok, unpackOrMsg: "nextExperssion: no primary"
    |=> receiver

    next = .peek
    // single primary before new line
    next line > tok line, ifTrue: [
      ^ maybePrimary
    ]

    // 1 ^
    
    | next kind
    // 1 ^inc 
    | TokenType.Identifier => [
      // primary identifier

      // msg = MessageSend args: List::NameAndExpr token: next
      // while there are identifiers - parse and save them, its a begining of unary     
      tok = .peek
      | tok kind 
      | TokenType.Identifier => [
        unaryIdentifiers = .parseManyIdent
        // 1 inc inc^
        unary = UnaryMsg 
          args: unaryIdentifiers toList 
          receiver: maybePrimary 
          token: maybePrimary token
        
        .peek kind == TokenType.BinarySymbol, ifTrue: [
          // 1 inc inc^ + 2
          binaryList = .parseManyBinary
          binary = BinaryMsg 
            args: binaryList toList 
            receiver: unary
            token: maybePrimary token
          .peek kind == TokenType.IdentifierColon, ifTrue: [
            // 1 inc from: 2
            TO DO: "parse keyword after binary2"
          ]
          ^binary
        ]

        // .peek kind == TokenType.IdentifierColon, ifTrue: [
        //   // 1 inc from: 2
        //   TO DO: "parse keyword after unary"
        // ]
        ^ unary
        Unit
      ]
      | TokenType.BinarySymbol => [
        binaryList = .parseManyBinary
        
        binary = BinaryMsg 
          args: binaryList toList 
          receiver: maybePrimary 
          token: maybePrimary token
        // statements add: binary
        // TODO нужно трекать уровень вложенности, и если вложенность больше 0, то не добавлять
        // .peek kind == TokenType.IdentifierColon, ifTrue: [
        //   // 1 inc from: 2
        //   TO DO: "parse keyword after binary1"
        // ]
        ^ binary
        Unit
      ]
      |=> [
        Unit
      ]
      
      TO DO: "parse unary"
    ]
    | TokenType.BinarySymbol => [
      // primary binary
      // 1 + 1 + 1
      // 1 + 1 sas: 2


      // 1 + ^2
      binaryList = .parseManyBinary
      
      binary = BinaryMsg 
        args: binaryList 
        receiver: maybePrimary 
        token: maybePrimary token
      // statements add: binary

      // .peek kind == TokenType.IdentifierColon, ifTrue: [
      //   TO DO: "binary is a receiver for keyword"
      // ]

      ^ binary
      // kw possible
    
      // if while parsing binary got keyword than continue keyword parsing
    ]
    // | TokenType.IdentifierColon => [
    //   // primary keyword
    //   // 1 from: 2
    //   // 1 inc from: 2      
    //   // 1 + 1 from: 2
    //   // binaryList = .parseManyBinary
    //   // binaryList debug
    //   TO DO: "parse simple keyword1"
    // ]
    |=> []

    ^ maybePrimary
  ]



  // / x| probably not just identifier without anything
  // / x = ...
  // / x inc ...
  // / X inc = []
  // / x + ...
  // / X + y::Int = []
  // / x that: ...
  // / X from::Int = []
  // / X from y:Int = []



  on match::TokenType -> Boolean = [
    .peek kind == match, ifTrue: [
      .step
      ^ true
    ]

    ^ false
  ]

  /// match Identifier|Nullable|Error
  on matchAssertAnyIdent: error::String -> Token = [
    tok = .peek

    ^ tok isIdentifier ifTrue: [
      .step
      tok
    ] ifFalse: [
      TO DO: error
    ]
  ]

  on parseNullOrIdentifier -> Identifier? = [
    tok = .peek
    ^ tok isNullOrIdentifier ifTrue: [
      .step
      Identifier name: tok lexeme token: tok
    ] ifFalse: [
      null
    ]
  ]

  on matchAssert::TokenType -> Token = [
    peek = .peek
    peek kind == matchAssert, ifTrue: [
      ^ .step
    ]
    kind = peek kind
    TO DO: "$matchAssert expected but got $peek"
  ]

  on matchString::String -> Boolean = [
    .peek lexeme == matchString, ifTrue: [
      .step
      ^ true
    ]

    ^ false
  ]

  on check: kind::TokenType = .peek kind == kind

  on done = .check: TokenType.EndOfFile

  on step -> Token = [
    x = .peek
    x kind == TokenType.EndOfFile, ifTrue: [
      TO DO: "step: EOF"
    ]
    current <- current inc
    ^ x
  ]
  on stepBack -> Token = [
    x = .peekAt: -1
    current <- current dec
    ^ x
  ]

  /// if current is out of bounds returns EOF
  /// otherwise returns token at current position
  on peek -> Token = [
    // current >= tokens count, ifTrue: [
    //   ^ Token eof
    // ]

    ^tokens at: current
  ]
  on peekAt: distance::Int -> Token = [
    realDistance = current + distance
    ^tokens at: realDistance
  ]
]
