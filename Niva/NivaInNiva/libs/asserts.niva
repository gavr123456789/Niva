type Assert

/// prints both expressions and values
constructor Assert that::Any? equals::Any? -> Unit = [
  a = Compiler getName: 1
  b = Compiler getName: 2

  that != equals => [
    Error throwWithMessage: "Assertion failed: ($a($that) != $b($equals)) ($that != $equals)", orPANIC
  ]
]

constructor Assert that::Any? equals::Any? andSay::String -> Unit = [
  a = Compiler getName: 1
  b = Compiler getName: 2

  that != equals => [
    Error throwWithMessage: "Assertion failed: ($a($that) != $b($equals)), $andSay", orPANIC
  ]
]

/// If thats false - ends the program with message
Bool assert: msg::String = [
  x = Compiler getName: 0
  this == false => 
    Error throwWithMessage: x + "\n" + msg, orPANIC
]

Int clampFrom: min::Int to: max::Int = 
  | true 
  | (this < min) => min 
  | (this > max) => max 
  |=> this
