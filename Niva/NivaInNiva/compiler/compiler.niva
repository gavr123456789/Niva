/// takes main file and collects all the files for compilation
type NivaBuildSystem
constructor NivaBuildSystem [
    on findAllWilesFrom: path::String? withIO: io::IO -> Map(String, String) = [
        // path is to main.niva, need to get its paret to start search
        p = path unpack: [str -> io getParent path: str] 
                 or: io currentDir

        files = io walkDir path: p,
            filter: [it path endsWith: ".niva"]
        

        pathToContent::mut Map(String, String) = #{}!
        files forEach: [
            content = io readFile path: it path
            pathToContent at: it nameWithoutExt put: content
        ]


        ^ pathToContent
    ]
]


/// takes fileNames to Content
type NivaCompiler 

constructor NivaCompiler [
    on runArgs: args::List(String) withIO: io::IO = [

        argsParsed = ArgParser args: args
        pathToContent = NivaBuildSystem findAllWilesFrom: argsParsed path withIO: io
        result = ResolverHelper resolve: pathToContent 
                                entryPoint: "entryPoint"

        // result entryPointExpressions at: 0, debug
        
        {option} = argsParsed
        | option
        | CompilerOption.Run => [
            
        ]
        | CompilerOption.Build => [
            fileToJSCOntent = TypeScript fullFromResolver: result

            realJSPath = "/home/gavr/Documents/Fun/Kotlin/Niva/Niva/NivaInNiva/1_compilerTest/realJS"
            fileToJSCOntent forEach: [file, jsContent -> 
                destanation = realJSPath + "/" + file + ".js"
                io writeFile file: destanation content: jsContent
            ]

            Unit
        ]
        | CompilerOption.Help => []
        | CompilerOption.Daemon => []
        | CompilerOption.RunTests => []
        | CompilerOption.Info => []

    ]
]