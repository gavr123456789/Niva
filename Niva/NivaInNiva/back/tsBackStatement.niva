Statement toTS -> String= 
    | this
    | TypeDecl => [
        // class Person {
        //     constructor(name, age) {
        //         this.name = name;
        //         this.age = age;
        //     }
        // }
        sb = StringBuilder new
        
        sb append: "export class "
        sb append: this name
        sb append: "{\n"
        sb append: "    constructor("
        
        argsStr = this fields joinWith: "," transform: [it name]

        sb append: argsStr
        sb append: ") {\n"

        // foreach arg
        this fields forEach: [
            name = it name
            sb append: "        this.$name = $name;\n"
        ]


        sb append: "    }\n"
        sb append: "}"   
        
        // and probably function CLASS_new_C()
        sb toString
    ]
    | EnumDecl => [TO DO]
    | UnionDecl => [TO DO]
    | MessageDecl => [
        
        sb = StringBuilder new
        methodName = receiver name + "_" + name 
        
        sb append: "export function "
        sb append: methodName

        
        argsStr = "_this" +
            (args isNotEmpty ifTrue: [", "] 
                             ifFalse: [""]) +
            (args joinWith: ", " 
                  transform: [it name])


        sb append: "("
        sb append: argsStr
        sb append: ") {\n"

        this body typedBody2 forEach: [expr -> 
            sb append: "    "
            sb appendLine: expr toTS
        ]

        sb append: "}"
        sb toString 
    ]
    |=> [
        "toTS: skipping top level expr: " + this token toString, log
        ""
    ]