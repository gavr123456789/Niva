//type Assert
//constructor Assert that::Any equals::Any -> Unit = [
//  that != equals => [
//    Error throwWithMessage: "Assertion failed: $that != $equals"
//  ]
//]
//Assert that: "sas" equals: "sas"


//union Op =
//| Inc v: Int
//| Move v: Int
//| Loop loop: MutableList::Op
//| Print
//
//type Tape tape: MutableList::Int pos: Int
//constructor Tape default = Tape tape: {1} pos: 0
//
//
//extend Tape [
//  on get = tape at: pos
//  on inc: x::Int = tape at: pos put: (tape at: pos) + x
//  on move: x::Int = [
//    pos <- pos + x
//    [pos >= tape count] whileTrue: [
//      tape <- tape copyOf: tape count * 2 // need to add IntArray for this
//    ]
//  ]
//]

type Tape pos: Int

tape = Tape pos: 5

extend Tape [
    on sas = [
        list = {1 2 3}
        [pos >= list count] whileTrue: [
            pos <- pos dec
            pos echo
        ]
   ]
]
tape sas

args echo


