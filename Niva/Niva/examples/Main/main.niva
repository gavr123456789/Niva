//type Assert
//constructor Assert that::Any equals::Any -> Unit = [
//  that != equals => [
//
//    Error throwWithMessage: "Assertion failed: $that != $equals"
//  ]
//]
//
//Assert that: "sas" equals: "sas"
//Assert that: "sas" equals: "sus"


// 5 to 5 words
//type WordGroup words1: MutableMap(Int, String) words2: MutableMap(Int, String)
//type GameData wordsGroups: MutableList::WordGroup
//
//type Game
//constructor Game fromFile::String wordsPerTest::Int = [
//  readCardToLines = [
//    text = FileSystem read: fromFile toPath
//
//    text split: "\n"
//  ]
//
//  lines = readCardToLines do
//
//  linesChunked = lines chunked: wordsPerTest
//
//  fillGroups = [ kek::List::String ->
//    words1::MutableMap(Int, String) = #{}
//    words2::MutableMap(Int, String) = #{}
//
//    kek forEachIndexed: [ i, line ->
//      line trim != "" => [
//        num = i + 1
//
//        r = line split: ":"
//        first = r at: 0 |> trim
//        second = r at: 1 |> trim
//        words1 at: num put: first
//        words2 at: num put: second
//      ]
//    ]
//
//
//    WordGroup words1: words1 words2: words2
//  ]
//
//  linesChunked forEach: [
//    wordGroup = fillGroups kek: it
//    GamePrinter print: wordGroup
//  ]
//
//  game = Game new
////> WordGroup words1: {1=sus, 2=sos} words2: {1=сус, 2=сос}
//  // wordGroup echo
//]
//
//type Answer answer: Int foreignWord: String
//type GamePrinter
//constructor GamePrinter print: wordGroup::WordGroup = [
//  foreignGroup = wordGroup words1
//  nativeGroup = wordGroup words2
//  shuffledTranslations = {3 1 2}//foreignGroup keys toList shuffled
//  shuffledTranslations echo
//
//  rightAnswers::MutableMap(Int, Int) = #{}
//
//  fillNewTable = [
//    result::MutableMap(String, Answer) = #{}
//
//    nativeGroup forEach: [num, nativeWord ->
//      shuffledVal = shuffledTranslations at: num - 1
//      foreignWord = foreignGroup at: num |> unpackOrError
//      result at: nativeWord put: (Answer answer: shuffledVal foreignWord: foreignWord)
//    ]
//    result
//  ]
////  qwe = fillNewTable do
//  newTable::MutableMap(String, Answer) = fillNewTable do
////  "newTable = $newTable"
//
//// изза того что мы выводим по индексам после удаления пропадает и индекс
//  printData = [
//
//    nativeGroup forEach: [num, v ->
//      lineWithNative = "$num: $v"
//
//      shuffledVal = shuffledTranslations at: num - 1
//      // "shuffledVal = $shuffledVal" echo
//
//      real = foreignGroup at: num
//      fake = foreignGroup at: shuffledVal
//
//      rightAnswers at: shuffledVal put: num
//      lineWithForeign = "$num: $fake"
//
//      lineWithNative + "\t" + lineWithForeign |> echo
//    ]
//  ]
//
//  checkAnswer = [ col::Int, answer::Int ->
//    rightAnswer = rightAnswers at: col
//    "rightAnswer is $rightAnswer, your answer is $answer" echo
//    rightAnswer == answer
//  ]
//
//
//
//
//
//  mut lives = 5
//  [(lives > 0) && (nativeGroup count > 0)] whileTrue: [
//    printData do
//    rightAnswers echo
//
//    ans = Console readln
//    splitted = ans split: " "
//    num1 = splitted at: 0 |> toInt
//    num2 = splitted at: 1 |> toInt
//
//    (nativeGroup keys contains: num1 |> not) ||
//    (foreignGroup keys contains: num2 |> not) => [
//        "wrong numbers!" echo
//    ] |=> [
//      isRight = checkAnswer col: num1 answer: num2
//      isRight => [
//        "Right answer!" echo
//        // "---" echo
//        // shuffledVal = (shuffledTranslations at: num1 - 1)
//
//        // // foreignGroup remove: num1
//        // foreignGroup at: num1 put: (foreignGroup at: shuffledVal |> unpackOrError)
//        // rightAnswers at: num2 put: shuffledVal
//
//        // "foreignGroup = $foreignGroup removing $num1" echo
//        // nativeGroup remove: num1
//        // "nativeGroup = $nativeGroup removing $num1" echo
//        // "---" echo
//      ] |=> [
//        "Wrong answer!" echo
//        "lives left: $lives" echo
//        lives <- lives dec
//      ]
//
//
//    ]
//
//    "\n" echo
//
//  ]
//
//  lives == 0 => "You looze!" |=> "You are Greek now ^_^ !"
//
//]
//
//
//
//game = Game
//  fromFile: "/home/gavr/Documents/Projects/Fun/Niva/niva_compiler/learnGreek/greekColors.txt"
//  wordsPerTest: 3
//

//list = {(1 inc) (2 inc inc) (3 inc dec)}

b = {1 2 3} first
b echo
//map = #{(1 dec) ("a b" split: " " |> first), 2 "b"}
//map = #{1 "a" 3 "b"}
//set = #((1..3 |> random) (1..3 |> random))
//list echo
//map echo
//set echo
