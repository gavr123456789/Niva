//String code -> Int = 5
//x = {"q" "w" "f"}
//x map: [ it split: "" |> map: &String code ]
//

//type Box x: T
//
//Box::Box::T unzip = [
//    this echo
//]
//
//q = Box x: {1 2 3}
//q unzip
///////////////
//MutableList::MutableList::T unzip = [
//    first::MutableList::T = {}
//    second::MutableList::T = {}
//
//    this forEach: [
//        first add: (it at: 0)
//        second add: (it at: 1)
//    ]
//
//    ^ { first second }
//]
//
//{({1 2 3}) ({4 5 6}) ({7 8 9})} unzip echo
/////////////////////


//x::MutableList::MutableList::Int = { ({1}) ({2}) }
//x echo

//type Lazy v: T? init: [ -> T]
//constructor Lazy init::[ -> T] = Lazy v: null init: init
//
//Lazy eval = [
//  result = v unpackOrValue: init do
//  v <- result
//  ^ result
//]
//
//x = Lazy init: [
//  "computing!!!" echo
//  1 + 1
//]
//
//x eval echo
//x eval echo
//x eval echo

// /////////////////////
// List::Int zipWith::List::Int = [
//     result::MutableList::MutableList::Int = {}

//     this forEachIndexed: [ index, it ->
//         result add: { it, (zipWith at: index) }
//     ]

//     ^ result
// ]

Bind package: "kotlin.reflect" content: [
    @rename: "KClass"
    type Class::T

    @emit: "$0::class"
    T class -> Class::T
]

Class echo = this toString echo

1 class echo
