//type Assert
//constructor Assert that::Any equals::Any -> Unit = [
//  that != equals => [
//
//    Error throwWithMessage: "Assertion failed: $that != $equals"
//  ]
//]
//
//Assert that: "sas" equals: "sas"
//Assert that: "sas" equals: "sus"


//text = "abc\ndef"
//x = (text split: "\n") dropLast: 1
//
//x echo





//fillGroups = [ lines::List::String ->
//    words1::MutableMap(Int, String) = #{}
//    words2::MutableMap(Int, String) = #{}
//    lines forEachIndexed: [i, line ->
//        num = i + 1
//
//        words1 at: 1 put: "sas"
//    ]
////    words1 at: 1 put: "sas"
//    words1 echo
//]
//
//// просто у самого List дефолтного ктото изменил T на String
//linesChunked = {1 2 3 4 5 6} chunked: 2
//
//linesChunked forEach: [
//// add test that in that situation it has type List::Int, not List::String
//    it echo
//    fillGroups lines: it
//]

//x = #{1 2 3 4}
//y = x at: 1 |> unpackOrError
//z = y + 5
//z echo



//union SomeUnion =
//| Yes x: Int
//| No y: String
//
//union ServerAns =
//| SomeUnion
//| NoVal
//| ErrorType1 str: String
//| ErrorType2 b: Boolean
//| Success value: Int
//
//x = ErrorType1 str: "sas"
//
//ServerAns print = | this
//| NoVal => "no value!" echo
//| ErrorType1 => str echo
//| ErrorType2 => b echo
//| Success => "Success $value!" echo
//| SomeUnion => [
//  | this
//  | Yes => x echo
//  | No => y echo
//]


union Hat =
| TopHat x: Int
| Bowler y: String

Hat print::Int = | this
| TopHat => x echo
| Bowler => y echo

Hat + x::Int = | this
| TopHat => x echo
| Bowler => y echo

Hat sas = | this
| TopHat => x echo
| Bowler => y echo

bowler = Bowler y: "sas"
bowler print: 5
bowler + 5
bowler sas
